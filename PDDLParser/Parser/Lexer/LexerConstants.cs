/* Generated By:JJTree&CSCC: Do not edit this line. LexerConstants.cs */
namespace PDDLParser.Parser.Lexer
{

using System;

public class LexerConstants {

  public const int EOF = 0;
  public const int SINGLE_LINE_COMMENT = 9;
  public const int FORMAL_COMMENT = 10;
  public const int MULTI_LINE_COMMENT = 11;
  public const int LPAREN = 13;
  public const int RPAREN = 14;
  public const int DEFINE = 15;
  public const int DOMAIN = 16;
  public const int REQUIREMENTS = 17;
  public const int TYPES = 18;
  public const int EITHER = 19;
  public const int CONSTANTS = 20;
  public const int PREDICATES = 21;
  public const int FUNCTIONS = 22;
  public const int NO_CYCLE_CHECK = 23;
  public const int DECLARE_DEFINED_SYMBOLS = 24;
  public const int ACTION = 25;
  public const int PRIORITY = 26;
  public const int PARAMETERS = 27;
  public const int PRECONDITION = 28;
  public const int EFFECT = 29;
  public const int PREFERENCE = 30;
  public const int WHEN = 31;
  public const int DURATIVE_ACTION = 32;
  public const int DURATION = 33;
  public const int CONDITION = 34;
  public const int DERIVED = 35;
  public const int DEFINED_PREDICATE = 36;
  public const int DEFINED_FUNCTION = 37;
  public const int LOCAL_VARS = 38;
  public const int ASSIGN_LOCAL_VAR = 39;
  public const int PROBLEM = 40;
  public const int P_DOMAIN = 41;
  public const int OBJECTS = 42;
  public const int INIT = 43;
  public const int GOAL = 44;
  public const int METRIC = 45;
  public const int STRIPS = 46;
  public const int TYPING = 47;
  public const int NEGATIVE_PRECONDITIONS = 48;
  public const int DISJUNCTIVE_PRECONDITIONS = 49;
  public const int EQUALITY = 50;
  public const int EXISTENTIAL_PRECONDITIONS = 51;
  public const int UNIVERSAL_PRECONDITIONS = 52;
  public const int QUANTIFIED_PRECONDITIONS = 53;
  public const int CONDITIONAL_EFFECTS = 54;
  public const int NUMERIC_FLUENTS = 55;
  public const int OBJECT_FLUENTS = 56;
  public const int FLUENTS = 57;
  public const int ADL = 58;
  public const int DURATIVE_ACTIONS = 59;
  public const int DERIVED_PREDICATES = 60;
  public const int TIMED_INITIAL_LITERALS = 61;
  public const int PREFERENCES = 62;
  public const int CONSTRAINTS = 63;
  public const int CONTINOUS_EFFECTS = 64;
  public const int DURATION_INEQUALITIES = 65;
  public const int TLPLAN = 66;
  public const int GREATER = 67;
  public const int LESS = 68;
  public const int GEQUAL = 69;
  public const int LEQUAL = 70;
  public const int EQUAL = 71;
  public const int NUMBER = 72;
  public const int MUL = 73;
  public const int DIV = 74;
  public const int ADD = 75;
  public const int SUB = 76;
  public const int MOD = 77;
  public const int MAX = 78;
  public const int MIN = 79;
  public const int EXPT = 80;
  public const int SQRT = 81;
  public const int ABS = 82;
  public const int LOG = 83;
  public const int EXP = 84;
  public const int ROUND = 85;
  public const int INT = 86;
  public const int FLOOR = 87;
  public const int CEIL = 88;
  public const int ASSIGN = 89;
  public const int SCALE_UP = 90;
  public const int SCALE_DOWN = 91;
  public const int INCREASE = 92;
  public const int DECREASE = 93;
  public const int OR = 94;
  public const int AND = 95;
  public const int XOR_UNIQUE = 96;
  public const int IMPLY = 97;
  public const int IF_THEN_ELSE = 98;
  public const int NOT = 99;
  public const int FORALL = 100;
  public const int EXISTS = 101;
  public const int EXISTS_UNIQUE = 102;
  public const int GOAL_MODALITY = 103;
  public const int ALWAYS = 104;
  public const int SOMETIME = 105;
  public const int EVENTUALLY = 106;
  public const int WITHIN = 107;
  public const int AT_MOST_ONCE = 108;
  public const int SOMETIME_AFTER = 109;
  public const int SOMETIME_BEFORE = 110;
  public const int ALWAYS_WITHIN = 111;
  public const int HOLD_DURING = 112;
  public const int HOLD_AFTER = 113;
  public const int UNTIL = 114;
  public const int WEAK_UNTIL = 115;
  public const int NEXT = 116;
  public const int AT = 117;
  public const int START = 118;
  public const int END = 119;
  public const int OVER = 120;
  public const int ALL = 121;
  public const int TOTAL_TIME = 122;
  public const int MAXIMIZE = 123;
  public const int MINIMIZE = 124;
  public const int IS_VIOLATED = 125;
  public const int T_ALWAYS = 126;
  public const int T_EVENTUALLY = 127;
  public const int T_UNTIL = 128;
  public const int VAR_DURATION = 129;
  public const int CONTINOUS_VARIABLE = 130;
  public const int POSITIVE_INFINITY = 131;
  public const int NEGATIVE_INFINITY = 132;
  public const int LBRACKET = 133;
  public const int RBRACKET = 134;
  public const int COLON = 135;
  public const int COMMA = 136;
  public const int NUMBER_TYPE = 137;
  public const int OBJECT_TYPE = 138;
  public const int UNDEFINED = 139;
  public const int SYMBOL = 140;
  public const int DIGIT = 141;
  public const int LETTER = 142;

  public const int DEFAULT = 0;
  public const int IN_SINGLE_LINE_COMMENT = 1;
  public const int IN_FORMAL_COMMENT = 2;
  public const int IN_MULTI_LINE_COMMENT = 3;

  public String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"//\"",
    "\";\"",
    "<token of kind 7>",
    "\"/*\"",
    "<SINGLE_LINE_COMMENT>",
    "\"*/\"",
    "\"*/\"",
    "<token of kind 12>",
    "\"(\"",
    "\")\"",
    "\"define\"",
    "\"domain\"",
    "\":requirements\"",
    "\":types\"",
    "\"either\"",
    "\":constants\"",
    "\":predicates\"",
    "\":functions\"",
    "\"#no-cycle-check\"",
    "\":declare-defined-symbols\"",
    "\":action\"",
    "\":priority\"",
    "\":parameters\"",
    "\":precondition\"",
    "\":effect\"",
    "\"preference\"",
    "\"when\"",
    "\":durative-action\"",
    "\":duration\"",
    "\":condition\"",
    "\":derived\"",
    "\":defined-predicate\"",
    "\":defined-function\"",
    "\"local-vars\"",
    "\":=\"",
    "\"problem\"",
    "\":domain\"",
    "\":objects\"",
    "\":init\"",
    "\":goal\"",
    "\":metric\"",
    "\":strips\"",
    "\":typing\"",
    "\":negative-preconditions\"",
    "\":disjunctive-preconditions\"",
    "\":equality\"",
    "\":existential-preconditions\"",
    "\":universal-preconditions\"",
    "\":quantified-preconditions\"",
    "\":conditional-effects\"",
    "\":numeric-fluents\"",
    "\":object-fluents\"",
    "\":fluents\"",
    "\":adl\"",
    "\":durative-actions\"",
    "\":derived-predicates\"",
    "\":timed-initial-literals\"",
    "\":preferences\"",
    "\":constraints\"",
    "\":continuous-effects\"",
    "\":duration-inequalities\"",
    "\":tlplan\"",
    "\">\"",
    "\"<\"",
    "\">=\"",
    "\"<=\"",
    "\"=\"",
    "<NUMBER>",
    "\"*\"",
    "\"/\"",
    "\"+\"",
    "\"-\"",
    "\"mod\"",
    "\"max\"",
    "\"min\"",
    "\"expt\"",
    "\"sqrt\"",
    "\"abs\"",
    "\"log\"",
    "\"exp\"",
    "\"round\"",
    "\"int\"",
    "\"floor\"",
    "\"ceil\"",
    "\"assign\"",
    "\"scale-up\"",
    "\"scale-down\"",
    "\"increase\"",
    "\"decrease\"",
    "\"or\"",
    "\"and\"",
    "\"xor!\"",
    "\"imply\"",
    "\"if-then-else\"",
    "\"not\"",
    "\"forall\"",
    "\"exists\"",
    "\"exists!\"",
    "\"GOAL\"",
    "\"always\"",
    "\"sometime\"",
    "\"eventually\"",
    "\"within\"",
    "\"at-most-once\"",
    "\"sometime-after\"",
    "\"sometime-before\"",
    "\"always-within\"",
    "\"hold-during\"",
    "\"hold-after\"",
    "\"until\"",
    "\"weak-until\"",
    "\"next\"",
    "\"at\"",
    "\"start\"",
    "\"end\"",
    "\"over\"",
    "\"all\"",
    "\"total-time\"",
    "\"maximize\"",
    "\"minimize\"",
    "\"is-violated\"",
    "\"t-always\"",
    "\"t-eventually\"",
    "\"t-until\"",
    "\"?duration\"",
    "\"#t\"",
    "\"inf+\"",
    "\"inf-\"",
    "\"[\"",
    "\"]\"",
    "\":\"",
    "\",\"",
    "\"number\"",
    "\"object\"",
    "\"undefined\"",
    "<SYMBOL>",
    "<DIGIT>",
    "<LETTER>",
    "\"?\"",
  };

}
}
