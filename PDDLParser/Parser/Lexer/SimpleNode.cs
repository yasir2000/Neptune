/* Generated By:JJTree: Do not edit this line. SimpleNode.java */

namespace PDDLParser.Parser.Lexer
{

    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Text;

public class SimpleNode : Node, IEnumerable<SimpleNode> {
    protected Node parent;

    protected Node[] children;

    protected int id;

    protected Lexer parser;

    protected Token token;

    protected int line;

    protected int column;

    protected String image;

    protected int typeId;
    
    

    public SimpleNode(int id) {
        this.id = id;
        this.line = -1;
        this.column = -1;
        this.image = "";
        this.typeId = -1;
    }

    public SimpleNode(Lexer p, int id)
        : this(id)
    {
        parser = p;
    }

    public void jjtOpen() {
    }

    public void jjtClose() {
    }

    public void jjtSetParent(Node n) {
        parent = n;
    }

    public Node jjtGetParent() {
        return parent;
    }

    public void jjtAddChild(Node n, int i) {
        if (children == null) {
            children = new Node[i + 1];
        } else if (i >= children.Length) {
            Node[] c = new Node[i + 1];
            //System.arraycopy(children, 0, c, 0, children.Length);
            Array.Copy(children, 0, c, 0, children.Length);
            children = c;
        }
        children[i] = n;
    }

    public Node jjtGetChild(int i) {
        return children[i];
    }

    public int jjtGetNumChildren() {
        return (children == null) ? 0 : children.Length;
    }

    /*
     * You can override these two methods in subclasses of SimpleNode to customize the way the node appears when the
     * tree is dumped. If your output uses more than one line you should override ToString(String), otherwise overriding
     * ToString() is probably all you need to do.
     */

    public override String ToString()
    {
        StringBuilder str = new StringBuilder();
        str.Append("[");
        str.Append(this.getLabel());
        
        if (!this.image.Equals("")) {
            str.Append(", image=\"" + this.image + "\"");
        }
        str.Append(", line=" + this.line);
        str.Append(", column=" + this.column);
        if (this.typeId != -1) {
            str.Append(", type=" + LexerTreeConstants.jjtNodeName[this.typeId]);
        }
        str.Append("]");
        return str.ToString();
        
    }

    public String ToString(String prefix) {
        return prefix + ToString();
    }

    public int getDepth() {
        int depth = 0;
        SimpleNode pred = (SimpleNode) this.parent;
        while (pred != null) {
            depth++;
            pred = (SimpleNode) pred.parent;
        }
        return depth;
    }
    /*
     * Override this method if you want to customize how the node dumps out its children.
     */

    public void dump(String prefix) {
        Console.WriteLine(ToString(prefix));
        if (children != null) {
            for (int i = 0; i < children.Length; ++i) {
                SimpleNode n = (SimpleNode) children[i];
                if (n != null) {
                    n.dump(prefix + " ");
                }
            }
        }
    }

    public void setToken(Token token) {
        this.token = token;
    }

    public String getLabel() {
        return LexerTreeConstants.jjtNodeName[id];
    }

    public void setLine(int line) {
        this.line = line;
    }

    public int getLine() {
        return this.line;
    }

    public void setColumn(int column) {
        this.column = column;
    }

    public int getColumn() {
        return this.column;
    }

    public void setTypeId(int typeId) {
        this.typeId = typeId;
    }

    public int GetSuffixId() {
        return this.typeId;
    }

    /**
     * @return Returns the image.
     */
    public String GetImage() {
        return image;
    }

    public int getId() {
        return this.id;
    }
    
    /**
     * @param image The image to set.
     */
    public void setImage(String image) {
        this.image = image.ToLower();
    }
    
    private class TreeIterator : IEnumerator<SimpleNode> {
        
        private LinkedList<SimpleNode> nodes;
        private SimpleNode currentNode;
        private SimpleNode rootNode;
        
        public TreeIterator(SimpleNode root) {
            this.nodes = new LinkedList<SimpleNode>();
            this.rootNode = root;
            Reset();
        }
        
        //public bool hasNext() {
        //    return !this.nodes.isEmpty();
        //}

        //public SimpleNode next() {
        //    SimpleNode node = null;
        //    if (this.hasNext()) { 
        //        node = nodes.poll();
        //        for (int i = 0; i < node.jjtGetNumChildren(); i++) {
        //            nodes.Add(i, (SimpleNode) node.jjtGetChild(i));
        //        }
        //    }
        //    return node;
        //}

        //public void remove() {
        //    return;
        //}

        public SimpleNode Current
        {
            get
            {
                if (currentNode == null)
                    throw new InvalidOperationException();

                return currentNode;                
            }
        }
        
        object IEnumerator.Current
        {
            get { return this.Current; }
        }

        public bool MoveNext()
        {
            if (nodes.Count > 0)
            {
                currentNode = nodes.First.Value;
                nodes.RemoveFirst();
                for (int i = currentNode.jjtGetNumChildren() - 1; i >= 0 ; i--)
                {    
                    // TODO: Make sure the logic is correct!
                    // It adds all children at the beginning of the list, in order of children.
                    nodes.AddFirst((SimpleNode)currentNode.jjtGetChild(i));
                }

                return true;
            }

            currentNode = null;
            return false;
        }

        public void Reset()
        {
            nodes.Clear();
            nodes.AddFirst(rootNode);
            currentNode = null;
        }

        public void Dispose() {}
    }

    //public IEnumerator<SimpleNode> iterator() {
    //   return new TreeIterator();
    //}

    public IEnumerator<SimpleNode> GetEnumerator()
    {
        return new TreeIterator(this);
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return this.GetEnumerator();
    }
}
}