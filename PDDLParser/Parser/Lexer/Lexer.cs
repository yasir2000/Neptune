/* Generated By:JJTree&CSCC: Do not edit this line. Lexer.cs */
//#warning Warnings disabled!!
#pragma warning disable 0162 // Unreachable code detected
#pragma warning disable 0168 // Variable declared but never used
#pragma warning disable 0169 // Private variable never used

namespace PDDLParser.Parser.Lexer
{

using System;
using System.IO;
using System.Text;









public class Lexer : LexerConstants /*@bgen(jjtree)*/{/*@bgen(jjtree)*/
  protected JJTLexerState jjtree = new JJTLexerState();
        private ErrorManager mgr;
        private string file;

        private static readonly int[] BLOCKS = {REQUIREMENTS,
                TYPES,
                CONSTANTS,
                PREDICATES,
                FUNCTIONS,
                ACTION,
                DURATIVE_ACTION,
                DERIVED,
                OBJECTS,
                INIT,
                GOAL,
                METRIC,
                EOF};

        private bool isBlock(int token) {
                int i = 0;
                while (i < BLOCKS.Length && (BLOCKS[i] != token)) i++;
                return i == BLOCKS.Length;
        }

        private void error(System.Exception e, int line, int column) {
                string message = "";
                if (e.GetType().Equals(typeof(TokenMgrError))) {
                        string[] tmp = e.Message.Split(' ');
                        int l = -1;
                        int c = -1;
                        int i = 0;
                        for (i = 0 ; i < tmp.Length; i++) {
                                if (tmp[i].Equals("line") && i+1 < tmp.Length) {
                                        l = int.Parse(tmp[i+1].Substring(0, tmp[i+1].Length-1));
                                }
                                if (tmp[i].Equals("column") && i+1 < tmp.Length) {
                                        c = int.Parse(tmp[i+1].Substring(0, tmp[i+1].Length-1));
                                }
                        }
                        message = System.Text.RegularExpressions.Regex.Split(e.Message, ".  ")[1];
                        this.mgr.logLexicalError(message, this.file, l, c);
                } else if (e.GetType().Equals(typeof(ParseException))) {
                        ParseException pe = (ParseException) e;
                        message = generateErrorMesssage(pe);
                        this.mgr.logLexicalError(message, this.file, pe.currentToken.beginLine, pe.currentToken.beginColumn);
                } else if (e is NullReferenceException) {
                        // Do nothing
                } else {
                        Console.WriteLine(e.StackTrace);
                        throw new ParseException(e.Message);
                }
                this.skipToNextBlock();
        }

        private void skipToNextBlock() {
                Token t;
                Token t2;
                do {
                        t = getNextToken();
                        t2 = getToken(2);

                } while (t2 != null && isBlock(t2.kind));
        }

        public void setErrorManager(ErrorManager mgr) {
                this.mgr = mgr;
        }

        public void setFile(string file) {
                this.file = file;
        }

        // Allows lexing and parsing any part of a file directly
        public SimpleNode popRootNode()
        {
                return (SimpleNode)this.jjtree.popNode();
        }

        /**
     * Creates the error message from a specific parse exception.
     * 
     * @param pe the parse exception.
     * @return the error message.
     */
    private string generateErrorMesssage(ParseException pe) {
        StringBuilder expected = new StringBuilder();
        bool expectedSeq = false;
        int maxSize = 0;
        for (int i = 0; i < pe.expectedTokenSequences.Length; i++) {
            if (maxSize < pe.expectedTokenSequences[i].Length) {
                maxSize = pe.expectedTokenSequences[i].Length;
            }
            for (int j = 0; j < pe.expectedTokenSequences[i].Length; j++) {
                expected.Append(pe.tokenImage[pe.expectedTokenSequences[i][j]]).Append(" ");
                expectedSeq = true;
            }
            if (pe.expectedTokenSequences[i][pe.expectedTokenSequences[i].Length - 1] != 0) {
                expected.Append("...");
            }
            if (i < pe.expectedTokenSequences.Length - 1) {
                expected.Append("\n").Append("    ");
            }
        }
        string retval = "unexpected token \"" + pe.currentToken.next.image + "\".";
        if (expectedSeq) {
                if (pe.expectedTokenSequences.Length == 1) {
                retval += "\nWas expecting:" + "\n" + "    ";
                } else {
                retval += "\nWas expecting one of:" + "\n" + "    ";
                }
                retval += expected.ToString();
        }
        return retval;
    }

  public SimpleNode parse() {
 /*@bgen(jjtree) ROOT */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTROOT);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t= null;
    try {
      try {
        if (jj_2_1(4)) {
          t = domain();
        } else if (jj_2_2(4)) {
          t = problem();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (System.Exception e) {
                this.mgr.logLexicalError("Lexical error file (" +file + ") : too many errors", file);
                {if (true) throw new ParseException(e.Message);}
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return jjtn000;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token domain() {
 /*@bgen(jjtree) DOMAIN */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTDOMAIN);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(DEFINE);
        jj_consume_token(LPAREN);
        jj_consume_token(DOMAIN);
        domain_name();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
      try {
        if (jj_2_3(2)) {
          t = require_def();
        } else {
          ;
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
      try {
        if (jj_2_4(2)) {
          t = type_def();
        } else {
          ;
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
      try {
        if (jj_2_5(2)) {
          t = constants_def();
        } else {
          ;
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
      try {
        if (jj_2_6(2)) {
          t = predicates_def();
        } else {
          ;
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
      try {
        if (jj_2_7(2)) {
          t = functions_def();
        } else {
          ;
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
      try {
        if (jj_2_8(2)) {
          t = constraints();
        } else {
          ;
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
      try {
        if (jj_2_9(2)) {
          t = declare_defined_symbols();
        } else {
          ;
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
      try {
        while (true) {
          switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
          case LPAREN:
            ;
            break;
          default:
            jj_la1[0] = jj_gen;
            goto label_1; break;
          }
          t = structure_def();
        }label_1: ;
        
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
      try {
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token require_def() {
 /*@bgen(jjtree) REQUIRE_DEF */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTREQUIRE_DEF);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(REQUIREMENTS);
        while (true) {
          require_key();
          switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
          case STRIPS:
          case TYPING:
          case NEGATIVE_PRECONDITIONS:
          case DISJUNCTIVE_PRECONDITIONS:
          case EQUALITY:
          case EXISTENTIAL_PRECONDITIONS:
          case UNIVERSAL_PRECONDITIONS:
          case QUANTIFIED_PRECONDITIONS:
          case CONDITIONAL_EFFECTS:
          case NUMERIC_FLUENTS:
          case OBJECT_FLUENTS:
          case FLUENTS:
          case ADL:
          case DURATIVE_ACTIONS:
          case DERIVED_PREDICATES:
          case TIMED_INITIAL_LITERALS:
          case PREFERENCES:
          case CONSTRAINTS:
          case CONTINOUS_EFFECTS:
          case DURATION_INEQUALITIES:
          case TLPLAN:
            ;
            break;
          default:
            jj_la1[1] = jj_gen;
            goto label_2; break;
          }
        }label_2: ;
        
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token require_key() {
 /*@bgen(jjtree) REQUIRE_KEY */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTREQUIRE_KEY);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
        case STRIPS:
          t = jj_consume_token(STRIPS);
          break;
        case TYPING:
          t = jj_consume_token(TYPING);
          break;
        case NEGATIVE_PRECONDITIONS:
          t = jj_consume_token(NEGATIVE_PRECONDITIONS);
          break;
        case DISJUNCTIVE_PRECONDITIONS:
          t = jj_consume_token(DISJUNCTIVE_PRECONDITIONS);
          break;
        case EQUALITY:
          t = jj_consume_token(EQUALITY);
          break;
        case EXISTENTIAL_PRECONDITIONS:
          t = jj_consume_token(EXISTENTIAL_PRECONDITIONS);
          break;
        case UNIVERSAL_PRECONDITIONS:
          t = jj_consume_token(UNIVERSAL_PRECONDITIONS);
          break;
        case QUANTIFIED_PRECONDITIONS:
          t = jj_consume_token(QUANTIFIED_PRECONDITIONS);
          break;
        case CONDITIONAL_EFFECTS:
          t = jj_consume_token(CONDITIONAL_EFFECTS);
          break;
        case OBJECT_FLUENTS:
          t = jj_consume_token(OBJECT_FLUENTS);
          break;
        case NUMERIC_FLUENTS:
          t = jj_consume_token(NUMERIC_FLUENTS);
          break;
        case FLUENTS:
          t = jj_consume_token(FLUENTS);
          break;
        case ADL:
          t = jj_consume_token(ADL);
          break;
        case DURATIVE_ACTIONS:
          t = jj_consume_token(DURATIVE_ACTIONS);
          break;
        case DERIVED_PREDICATES:
          t = jj_consume_token(DERIVED_PREDICATES);
          break;
        case TIMED_INITIAL_LITERALS:
          t = jj_consume_token(TIMED_INITIAL_LITERALS);
          break;
        case PREFERENCES:
          t = jj_consume_token(PREFERENCES);
          break;
        case CONSTRAINTS:
          t = jj_consume_token(CONSTRAINTS);
          break;
        case CONTINOUS_EFFECTS:
          t = jj_consume_token(CONTINOUS_EFFECTS);
          break;
        case DURATION_INEQUALITIES:
          t = jj_consume_token(DURATION_INEQUALITIES);
          break;
        case TLPLAN:
          t = jj_consume_token(TLPLAN);
          break;
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException(); break;
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                jjtn000.setImage(t.image);
                {if (true) return t;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token type_def() {
 /*@bgen(jjtree) TYPE_DEF */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTTYPE_DEF);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(TYPES);
        typed_list(LexerTreeConstants.JJTPRIMITIVE_TYPE);
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token typed_list(int typ) {
 /*@bgen(jjtree) TYPED_LIST */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTTYPED_LIST);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        if (typ == LexerTreeConstants.JJTPRIMITIVE_TYPE) {
          while (true) {
            switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
            case OBJECT_TYPE:
            case SYMBOL:
              ;
              break;
            default:
              jj_la1[3] = jj_gen;
              goto label_3; break;
            }
            t = primitive_type();
          }label_3: ;
          
          switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
          case SUB:
            jj_consume_token(SUB);
            type();
            typed_list(typ);
            break;
          default:
            jj_la1[4] = jj_gen;
            ; break;
          }
        } else if (typ == LexerTreeConstants.JJTCONSTANT) {
          while (true) {
            switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
            case SYMBOL:
              ;
              break;
            default:
              jj_la1[5] = jj_gen;
              goto label_4; break;
            }
            t = constant();
          }label_4: ;
          
          switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
          case SUB:
            jj_consume_token(SUB);
            type();
            typed_list(typ);
            break;
          default:
            jj_la1[6] = jj_gen;
            ; break;
          }
        } else if (typ == LexerTreeConstants.JJTVARIABLE) {
          while (true) {
            switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
            case 143:
              ;
              break;
            default:
              jj_la1[7] = jj_gen;
              goto label_5; break;
            }
            t = variable();
          }label_5: ;
          
          switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
          case SUB:
            jj_consume_token(SUB);
            type();
            typed_list(typ);
            break;
          default:
            jj_la1[8] = jj_gen;
            ; break;
          }
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                if (t != null) {
                                jjtn000.setLine(t.beginLine);
                                jjtn000.setColumn(t.beginColumn);
                                jjtn000.setTypeId(LexerTreeConstants.JJTVARIABLE);
                }
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token type() {
 /*@bgen(jjtree) TYPE */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTTYPE);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
        case LPAREN:
          t = jj_consume_token(LPAREN);
          jj_consume_token(EITHER);
          while (true) {
            primitive_type();
            switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
            case OBJECT_TYPE:
            case SYMBOL:
              ;
              break;
            default:
              jj_la1[9] = jj_gen;
              goto label_6; break;
            }
          }label_6: ;
          
          jj_consume_token(RPAREN);
          break;
        case OBJECT_TYPE:
        case SYMBOL:
          t = primitive_type();
          break;
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException(); break;
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token primitive_type() {
 /*@bgen(jjtree) PRIMITIVE_TYPE */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTPRIMITIVE_TYPE);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
      case OBJECT_TYPE:
        t = jj_consume_token(OBJECT_TYPE);
        break;
      case SYMBOL:
        t = jj_consume_token(SYMBOL);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException(); break;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                jjtn000.setImage(t.image);
                {if (true) return t;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token constants_def() {
 /*@bgen(jjtree) CONSTANT_DEF */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTCONSTANT_DEF);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(CONSTANTS);
        typed_list(LexerTreeConstants.JJTCONSTANT);
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token constant() {
 /*@bgen(jjtree) CONSTANT */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTCONSTANT);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      t = jj_consume_token(SYMBOL);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                jjtn000.setImage(t.image);
                {if (true) return t;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token predicates_def() {
 /*@bgen(jjtree) PREDICATE_DEF */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTPREDICATE_DEF);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(PREDICATES);
        while (true) {
          atomic_formula_skeleton_declaration();
          switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
          case LPAREN:
            ;
            break;
          default:
            jj_la1[12] = jj_gen;
            goto label_7; break;
          }
        }label_7: ;
        
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token attribute() {
 /*@bgen(jjtree) ATTRIBUTE */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTATTRIBUTE);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      t = jj_consume_token(NO_CYCLE_CHECK);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.setTypeId(t.kind);
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token atomic_formula_skeleton() {
 /*@bgen(jjtree) ATOMIC_FORMULA_SKELETON */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTATOMIC_FORMULA_SKELETON);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      t = jj_consume_token(LPAREN);
      predicate();
      typed_list(LexerTreeConstants.JJTVARIABLE);
      jj_consume_token(RPAREN);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token atomic_formula_skeleton_declaration() {
 /*@bgen(jjtree) ATOMIC_FORMULA_SKELETON_DECLARATION */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTATOMIC_FORMULA_SKELETON_DECLARATION);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      t = jj_consume_token(LPAREN);
      predicate();
      typed_list(LexerTreeConstants.JJTVARIABLE);
      jj_consume_token(RPAREN);
      while (true) {
        switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
        case NO_CYCLE_CHECK:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          goto label_8; break;
        }
        attribute();
      }label_8: ;
      
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token predicate() {
 /*@bgen(jjtree) PREDICATE */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTPREDICATE);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
      case SYMBOL:
        t = jj_consume_token(SYMBOL);
        break;
      case AT:
        t = jj_consume_token(AT);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException(); break;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                jjtn000.setImage(t.image);
                {if (true) return t;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token variable() {
 /*@bgen(jjtree) VARIABLE */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTVARIABLE);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      jj_consume_token(143);
      switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
      case SYMBOL:
        t = jj_consume_token(SYMBOL);
        break;
      case OBJECT_TYPE:
        t = jj_consume_token(OBJECT_TYPE);
        break;
      case NUMBER_TYPE:
        t = jj_consume_token(NUMBER_TYPE);
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException(); break;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                jjtn000.setImage(t.image);
                {if (true) return t;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token functions_def() {
 /*@bgen(jjtree) FUNCTION_DEF */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTFUNCTION_DEF);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(FUNCTIONS);
        function_typed_list(LexerTreeConstants.JJTATOMIC_FUNCTION_SKELETON_DECLARATION);
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token atomic_function_skeleton() {
 /*@bgen(jjtree) ATOMIC_FUNCTION_SKELETON */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTATOMIC_FUNCTION_SKELETON);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      t = jj_consume_token(LPAREN);
      functor();
      typed_list(LexerTreeConstants.JJTVARIABLE);
      jj_consume_token(RPAREN);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token atomic_function_skeleton_declaration() {
 /*@bgen(jjtree) ATOMIC_FUNCTION_SKELETON_DECLARATION */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTATOMIC_FUNCTION_SKELETON_DECLARATION);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      t = jj_consume_token(LPAREN);
      functor();
      typed_list(LexerTreeConstants.JJTVARIABLE);
      jj_consume_token(RPAREN);
      while (true) {
        switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
        case NO_CYCLE_CHECK:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          goto label_9; break;
        }
        attribute();
      }label_9: ;
      
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token functor() {
 /*@bgen(jjtree) FUNCTOR */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTFUNCTOR);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
      case SYMBOL:
        t = jj_consume_token(SYMBOL);
        break;
      case AT:
        t = jj_consume_token(AT);
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException(); break;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                jjtn000.setImage(t.image);
                {if (true) return t;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token function_typed_list(int typ) {
 /*@bgen(jjtree) FUNCTION_TYPED_LIST */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTFUNCTION_TYPED_LIST);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        if (typ == LexerTreeConstants.JJTATOMIC_FUNCTION_SKELETON_DECLARATION) {
          while (true) {
            switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
            case LPAREN:
              ;
              break;
            default:
              jj_la1[18] = jj_gen;
              goto label_10; break;
            }
            t = atomic_function_skeleton_declaration();
          }label_10: ;
          
        } else if (typ == LexerTreeConstants.JJTVARIABLE) {
          while (true) {
            switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
            case 143:
              ;
              break;
            default:
              jj_la1[19] = jj_gen;
              goto label_11; break;
            }
            t = variable();
          }label_11: ;
          
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
        case SUB:
          jj_consume_token(SUB);
          function_type();
          function_typed_list(typ);
          break;
        default:
          jj_la1[20] = jj_gen;
          ; break;
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                if (t != null) {
                  jjtn000.setTypeId(typ);
                        jjtn000.setLine(t.beginLine);
                        jjtn000.setColumn(t.beginColumn);
                }
                {if (true) return t;}
    } catch (System.Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 is ApplicationException) {
      {if (true) throw (ApplicationException)jjte000;}
    }
    if (jjte000 is ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Exception)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token typed_function() {
 /*@bgen(jjtree) TYPED_FUNCTION */
  SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTTYPED_FUNCTION);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = atomic_function_skeleton();
        switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
        case SUB:
          jj_consume_token(SUB);
          function_type();
          break;
        default:
          jj_la1[21] = jj_gen;
          ; break;
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                if (t != null) {
                        jjtn000.setLine(t.beginLine);
                        jjtn000.setColumn(t.beginColumn);
                }
                {if (true) return t;}
    } catch (System.Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 is ApplicationException) {
      {if (true) throw (ApplicationException)jjte000;}
    }
    if (jjte000 is ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Exception)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token function_type() {
 /*@bgen(jjtree) FUNCTION_TYPE */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTFUNCTION_TYPE);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
        case NUMBER_TYPE:
          t = jj_consume_token(NUMBER_TYPE);
          break;
        case LPAREN:
        case OBJECT_TYPE:
        case SYMBOL:
          t = type();
          break;
        default:
          jj_la1[22] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException(); break;
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                jjtn000.setImage(t.image);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token con_gd() {
 /*@bgen(jjtree) CON_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTCON_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        if (jj_2_10(2)) {
          t = and_con_gd();
        } else if (jj_2_11(2)) {
          t = or_con_gd();
        } else if (jj_2_12(2)) {
          t = xor_unique_con_gd();
        } else if (jj_2_13(2)) {
          t = not_con_gd();
        } else if (jj_2_14(2)) {
          t = imply_con_gd();
        } else if (jj_2_15(2)) {
          t = if_then_else_con_gd();
        } else if (jj_2_16(2)) {
          t = exists_sub_con_gd();
        } else if (jj_2_17(2)) {
          t = exists_unique_sub_con_gd();
        } else if (jj_2_18(2)) {
          t = forall_con_gd();
        } else if (jj_2_19(2)) {
          t = at_end_con_gd();
        } else if (jj_2_20(2)) {
          t = t_always_con_gd();
        } else if (jj_2_21(2)) {
          t = t_eventually_con_gd();
        } else if (jj_2_22(2)) {
          t = t_until_con_gd();
        } else if (jj_2_23(2)) {
          t = always_con_gd();
        } else if (jj_2_24(2)) {
          t = until_con_gd();
        } else if (jj_2_25(2)) {
          t = weak_until_con_gd();
        } else if (jj_2_26(2)) {
          t = next_con_gd();
        } else if (jj_2_27(2)) {
          t = sometime_con_gd();
        } else if (jj_2_28(2)) {
          t = within_con_gd();
        } else if (jj_2_29(2)) {
          t = at_most_once_con_gd();
        } else if (jj_2_30(2)) {
          t = sometime_after_con_gd();
        } else if (jj_2_31(2)) {
          t = sometime_before_con_gd();
        } else if (jj_2_32(2)) {
          t = always_within_con_gd();
        } else if (jj_2_33(2)) {
          t = hold_during_con_gd();
        } else if (jj_2_34(2)) {
          t = hold_after_con_gd();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token and_con_gd() {
 /*@bgen(jjtree) AND_CON_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTAND_CON_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(AND);
        while (true) {
          switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
          case LPAREN:
            ;
            break;
          default:
            jj_la1[23] = jj_gen;
            goto label_12; break;
          }
          con_gd();
        }label_12: ;
        
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token or_con_gd() {
 /*@bgen(jjtree) OR_CON_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTOR_CON_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(OR);
        while (true) {
          switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
          case LPAREN:
            ;
            break;
          default:
            jj_la1[24] = jj_gen;
            goto label_13; break;
          }
          con_gd();
        }label_13: ;
        
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token xor_unique_con_gd() {
 /*@bgen(jjtree) XOR_UNIQUE_CON_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTXOR_UNIQUE_CON_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(XOR_UNIQUE);
        while (true) {
          con_gd();
          switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
          case LPAREN:
            ;
            break;
          default:
            jj_la1[25] = jj_gen;
            goto label_14; break;
          }
        }label_14: ;
        
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token not_con_gd() {
 /*@bgen(jjtree) NOT_CON_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTNOT_CON_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(NOT);
        con_gd();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token imply_con_gd() {
 /*@bgen(jjtree) IMPLY_CON_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTIMPLY_CON_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(IMPLY);
        gd();
        con_gd();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token if_then_else_con_gd() {
 /*@bgen(jjtree) IF_THEN_ELSE_CON_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTIF_THEN_ELSE_CON_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(IF_THEN_ELSE);
        gd();
        con_gd();
        con_gd();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token exists_con_gd() {
 /*@bgen(jjtree) EXISTS_CON_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTEXISTS_CON_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(EXISTS);
        jj_consume_token(LPAREN);
        typed_list(LexerTreeConstants.JJTVARIABLE);
        jj_consume_token(RPAREN);
        con_gd();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token exists_unique_con_gd() {
 /*@bgen(jjtree) EXISTS_UNIQUE_CON_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTEXISTS_UNIQUE_CON_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(EXISTS_UNIQUE);
        jj_consume_token(LPAREN);
        typed_list(LexerTreeConstants.JJTVARIABLE);
        jj_consume_token(RPAREN);
        con_gd();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token forall_con_gd() {
 /*@bgen(jjtree) FORALL_CON_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTFORALL_CON_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(FORALL);
        jj_consume_token(LPAREN);
        typed_list(LexerTreeConstants.JJTVARIABLE);
        jj_consume_token(RPAREN);
        con_gd();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token at_end_con_gd() {
 /*@bgen(jjtree) AT_END_CON_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTAT_END_CON_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(AT);
        jj_consume_token(END);
        gd();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token t_always_con_gd() {
 /*@bgen(jjtree) T_ALWAYS_CON_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTT_ALWAYS_CON_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(T_ALWAYS);
        time_interval();
        sub_con_gd();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token t_eventually_con_gd() {
 /*@bgen(jjtree) T_EVENTUALLY_CON_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTT_EVENTUALLY_CON_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(T_EVENTUALLY);
        time_interval();
        sub_con_gd();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token t_until_con_gd() {
 /*@bgen(jjtree) T_UNTIL_CON_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTT_UNTIL_CON_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(T_UNTIL);
        time_interval();
        sub_con_gd();
        sub_con_gd();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token always_con_gd() {
 /*@bgen(jjtree) ALWAYS_CON_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTALWAYS_CON_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(ALWAYS);
        sub_con_gd();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token until_con_gd() {
 /*@bgen(jjtree) UNTIL_CON_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTUNTIL_CON_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(UNTIL);
        sub_con_gd();
        sub_con_gd();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token weak_until_con_gd() {
 /*@bgen(jjtree) WEAK_UNTIL_CON_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTWEAK_UNTIL_CON_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(WEAK_UNTIL);
        sub_con_gd();
        sub_con_gd();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token next_con_gd() {
 /*@bgen(jjtree) NEXT_CON_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTNEXT_CON_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(NEXT);
        sub_con_gd();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token sometime_con_gd() {
 /*@bgen(jjtree) SOMETIME_CON_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTSOMETIME_CON_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
        case SOMETIME:
          jj_consume_token(SOMETIME);
          break;
        case EVENTUALLY:
          jj_consume_token(EVENTUALLY);
          break;
        default:
          jj_la1[26] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException(); break;
        }
        sub_con_gd();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token within_con_gd() {
 /*@bgen(jjtree) WITHIN_CON_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTWITHIN_CON_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(WITHIN);
        number();
        sub_con_gd();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token at_most_once_con_gd() {
 /*@bgen(jjtree) AT_MOST_ONCE_CON_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTAT_MOST_ONCE_CON_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(AT_MOST_ONCE);
        sub_con_gd();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token sometime_after_con_gd() {
 /*@bgen(jjtree) SOMETIME_AFTER_CON_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTSOMETIME_AFTER_CON_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(SOMETIME_AFTER);
        sub_con_gd();
        sub_con_gd();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token sometime_before_con_gd() {
 /*@bgen(jjtree) SOMETIME_BEFORE_CON_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTSOMETIME_BEFORE_CON_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(SOMETIME_BEFORE);
        sub_con_gd();
        sub_con_gd();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token always_within_con_gd() {
 /*@bgen(jjtree) ALWAYS_WITHIN_CON_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTALWAYS_WITHIN_CON_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(ALWAYS_WITHIN);
        number();
        sub_con_gd();
        sub_con_gd();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token hold_during_con_gd() {
 /*@bgen(jjtree) HOLD_DURING_CON_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTHOLD_DURING_CON_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(HOLD_DURING);
        number();
        number();
        sub_con_gd();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token hold_after_con_gd() {
 /*@bgen(jjtree) HOLD_AFTER_CON_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTHOLD_AFTER_CON_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(HOLD_AFTER);
        number();
        sub_con_gd();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token time_interval() {
 /*@bgen(jjtree) TIME_INTERVAL */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTTIME_INTERVAL);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(COLON);
        lower_time_bound();
        jj_consume_token(COMMA);
        upper_time_bound();
        jj_consume_token(COLON);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token lower_time_bound() {
 /*@bgen(jjtree) LOWER_TIME_BOUND */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTLOWER_TIME_BOUND);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = lower_bound_type();
        lower_bound_time();
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token lower_bound_type() {
 /*@bgen(jjtree) LOWER_BOUND_TYPE */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTLOWER_BOUND_TYPE);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
        case LBRACKET:
          t = jj_consume_token(LBRACKET);
          break;
        case LPAREN:
          t = jj_consume_token(LPAREN);
          break;
        default:
          jj_la1[27] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException(); break;
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                jjtn000.setImage(t.image);
                {if (true) return t;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token lower_bound_time() {
 /*@bgen(jjtree) LOWER_BOUND_TIME */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTLOWER_BOUND_TIME);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
        case NUMBER:
          t = number();
          break;
        case NEGATIVE_INFINITY:
          t = negative_infinity();
          break;
        default:
          jj_la1[28] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException(); break;
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token negative_infinity() {
 /*@bgen(jjtree) NEGATIVE_INFINITY */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTNEGATIVE_INFINITY);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(NEGATIVE_INFINITY);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                jjtn000.setImage(t.image);
                {if (true) return t;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token upper_time_bound() {
 /*@bgen(jjtree) UPPER_TIME_BOUND */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTUPPER_TIME_BOUND);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = upper_bound_time();
        upper_bound_type();
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token upper_bound_type() {
 /*@bgen(jjtree) UPPER_BOUND_TYPE */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTUPPER_BOUND_TYPE);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
        case RBRACKET:
          t = jj_consume_token(RBRACKET);
          break;
        case RPAREN:
          t = jj_consume_token(RPAREN);
          break;
        default:
          jj_la1[29] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException(); break;
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                jjtn000.setImage(t.image);
                {if (true) return t;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token upper_bound_time() {
 /*@bgen(jjtree) UPPER_BOUND_TIME */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTUPPER_BOUND_TIME);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
        case NUMBER:
          t = number();
          break;
        case POSITIVE_INFINITY:
          t = positive_infinity();
          break;
        default:
          jj_la1[30] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException(); break;
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token positive_infinity() {
 /*@bgen(jjtree) POSITIVE_INFINITY */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTPOSITIVE_INFINITY);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(POSITIVE_INFINITY);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                jjtn000.setImage(t.image);
                {if (true) return t;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token sub_con_gd() {
 /*@bgen(jjtree) SUB_CON_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTSUB_CON_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        if (jj_2_35(2)) {
          t = and_sub_con_gd();
        } else if (jj_2_36(2)) {
          t = or_sub_con_gd();
        } else if (jj_2_37(2)) {
          t = xor_unique_sub_con_gd();
        } else if (jj_2_38(2)) {
          t = not_sub_con_gd();
        } else if (jj_2_39(2)) {
          t = imply_sub_con_gd();
        } else if (jj_2_40(2)) {
          t = if_then_else_sub_con_gd();
        } else if (jj_2_41(2)) {
          t = exists_sub_con_gd();
        } else if (jj_2_42(2)) {
          t = exists_unique_sub_con_gd();
        } else if (jj_2_43(2)) {
          t = forall_sub_con_gd();
        } else if (jj_2_44(2)) {
          t = con_gd();
        } else if (jj_2_45(2)) {
          t = gd();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token and_sub_con_gd() {
 /*@bgen(jjtree) AND_SUB_CON_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTAND_SUB_CON_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(AND);
        while (true) {
          switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
          case LPAREN:
            ;
            break;
          default:
            jj_la1[31] = jj_gen;
            goto label_15; break;
          }
          sub_con_gd();
        }label_15: ;
        
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token or_sub_con_gd() {
 /*@bgen(jjtree) OR_SUB_CON_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTOR_SUB_CON_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(OR);
        while (true) {
          switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
          case LPAREN:
            ;
            break;
          default:
            jj_la1[32] = jj_gen;
            goto label_16; break;
          }
          sub_con_gd();
        }label_16: ;
        
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token xor_unique_sub_con_gd() {
 /*@bgen(jjtree) XOR_UNIQUE_SUB_CON_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTXOR_UNIQUE_SUB_CON_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(XOR_UNIQUE);
        while (true) {
          sub_con_gd();
          switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
          case LPAREN:
            ;
            break;
          default:
            jj_la1[33] = jj_gen;
            goto label_17; break;
          }
        }label_17: ;
        
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token not_sub_con_gd() {
 /*@bgen(jjtree) NOT_SUB_CON_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTNOT_SUB_CON_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(NOT);
        sub_con_gd();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token imply_sub_con_gd() {
 /*@bgen(jjtree) IMPLY_SUB_CON_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTIMPLY_SUB_CON_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(IMPLY);
        gd();
        sub_con_gd();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token if_then_else_sub_con_gd() {
 /*@bgen(jjtree) IF_THEN_ELSE_SUB_CON_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTIF_THEN_ELSE_SUB_CON_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(IF_THEN_ELSE);
        gd();
        sub_con_gd();
        sub_con_gd();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token exists_sub_con_gd() {
 /*@bgen(jjtree) EXISTS_SUB_CON_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTEXISTS_SUB_CON_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(EXISTS);
        jj_consume_token(LPAREN);
        typed_list(LexerTreeConstants.JJTVARIABLE);
        jj_consume_token(RPAREN);
        sub_con_gd();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token exists_unique_sub_con_gd() {
 /*@bgen(jjtree) EXISTS_UNIQUE_SUB_CON_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTEXISTS_UNIQUE_SUB_CON_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(EXISTS_UNIQUE);
        jj_consume_token(LPAREN);
        typed_list(LexerTreeConstants.JJTVARIABLE);
        jj_consume_token(RPAREN);
        sub_con_gd();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token forall_sub_con_gd() {
 /*@bgen(jjtree) FORALL_SUB_CON_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTFORALL_SUB_CON_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(FORALL);
        jj_consume_token(LPAREN);
        typed_list(LexerTreeConstants.JJTVARIABLE);
        jj_consume_token(RPAREN);
        sub_con_gd();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token gd() {
 /*@bgen(jjtree) GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTGD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        if (jj_2_46(2)) {
          t = atomic_formula(LexerTreeConstants.JJTTERM);
        } else if (jj_2_47(2)) {
          t = and_gd();
        } else if (jj_2_48(2)) {
          t = or_gd();
        } else if (jj_2_49(2)) {
          t = xor_unique_gd();
        } else if (jj_2_50(2)) {
          t = not_gd();
        } else if (jj_2_51(2)) {
          t = imply_gd();
        } else if (jj_2_52(2)) {
          t = if_then_else_gd();
        } else if (jj_2_53(2)) {
          t = exists_gd();
        } else if (jj_2_54(2)) {
          t = exists_unique_gd();
        } else if (jj_2_55(2)) {
          t = forall_gd();
        } else if (jj_2_56(2)) {
          t = f_comp();
        } else if (jj_2_57(2)) {
          t = goal_modality();
        } else if (jj_2_58(2)) {
          t = assign_local_var();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token goal_modality() {
 /*@bgen(jjtree) GOAL_MODALITY */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTGOAL_MODALITY);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(GOAL_MODALITY);
        gd();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token assign_local_var() {
 /*@bgen(jjtree) ASSIGN_LOCAL_VAR */
  SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTASSIGN_LOCAL_VAR);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(ASSIGN_LOCAL_VAR);
        function_or_variable();
        local_value();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
    this.error(e, t.beginLine, t.beginColumn);
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setLine(t.beginLine);
    jjtn000.setColumn(t.beginColumn);
    {if (true) return t;}
    } catch (System.Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 is ApplicationException) {
      {if (true) throw (ApplicationException)jjte000;}
    }
    if (jjte000 is ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Exception)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token function_or_variable() {
 /*@bgen(jjtree) FUNCTION_OR_VARIABLE */
  SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTFUNCTION_OR_VARIABLE);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
        case AT:
        case SYMBOL:
          t = functor();
          break;
        case 143:
          t = variable();
          break;
        default:
          jj_la1[34] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException(); break;
        }
      } catch (System.Exception e) {
    this.error(e, t.beginLine, t.beginColumn);
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setLine(t.beginLine);
    jjtn000.setColumn(t.beginColumn);
    {if (true) return t;}
    } catch (System.Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 is ApplicationException) {
      {if (true) throw (ApplicationException)jjte000;}
    }
    if (jjte000 is ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Exception)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token local_value() {
 /*@bgen(jjtree) LOCAL_VALUE */
  SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTLOCAL_VALUE);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        if (jj_2_59(3)) {
          t = variable();
        } else if (jj_2_60(3)) {
          t = f_exp();
        } else if (jj_2_61(3)) {
          t = term();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (System.Exception e) {
    this.error(e, t.beginLine, t.beginColumn);
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setLine(t.beginLine);
    jjtn000.setColumn(t.beginColumn);
    {if (true) return t;}
    } catch (System.Exception jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 is ApplicationException) {
      {if (true) throw (ApplicationException)jjte000;}
    }
    if (jjte000 is ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Exception)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token and_gd() {
 /*@bgen(jjtree) AND_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTAND_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(AND);
        while (true) {
          switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
          case LPAREN:
            ;
            break;
          default:
            jj_la1[35] = jj_gen;
            goto label_18; break;
          }
          gd();
        }label_18: ;
        
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token or_gd() {
 /*@bgen(jjtree) OR_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTOR_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(OR);
        while (true) {
          switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
          case LPAREN:
            ;
            break;
          default:
            jj_la1[36] = jj_gen;
            goto label_19; break;
          }
          gd();
        }label_19: ;
        
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token xor_unique_gd() {
 /*@bgen(jjtree) XOR_UNIQUE_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTXOR_UNIQUE_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(XOR_UNIQUE);
        while (true) {
          gd();
          switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
          case LPAREN:
            ;
            break;
          default:
            jj_la1[37] = jj_gen;
            goto label_20; break;
          }
        }label_20: ;
        
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token not_gd() {
 /*@bgen(jjtree) NOT_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTNOT_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(NOT);
        gd();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token imply_gd() {
 /*@bgen(jjtree) IMPLY_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTIMPLY_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(IMPLY);
        gd();
        gd();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token if_then_else_gd() {
 /*@bgen(jjtree) IF_THEN_ELSE_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTIF_THEN_ELSE_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(IF_THEN_ELSE);
        gd();
        gd();
        gd();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token exists_gd() {
 /*@bgen(jjtree) EXISTS_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTEXISTS_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(EXISTS);
        jj_consume_token(LPAREN);
        typed_list(LexerTreeConstants.JJTVARIABLE);
        jj_consume_token(RPAREN);
        gd();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token exists_unique_gd() {
 /*@bgen(jjtree) EXISTS_UNIQUE_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTEXISTS_UNIQUE_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(EXISTS_UNIQUE);
        jj_consume_token(LPAREN);
        typed_list(LexerTreeConstants.JJTVARIABLE);
        jj_consume_token(RPAREN);
        gd();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token forall_gd() {
 /*@bgen(jjtree) FORALL_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTFORALL_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(FORALL);
        jj_consume_token(LPAREN);
        typed_list(LexerTreeConstants.JJTVARIABLE);
        jj_consume_token(RPAREN);
        gd();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token atomic_formula(int typ) {
 /*@bgen(jjtree) ATOMIC_FORMULA */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTATOMIC_FORMULA);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        predicate();
        if (typ == LexerTreeConstants.JJTCONSTANT) {
          while (true) {
            switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
            case SYMBOL:
              ;
              break;
            default:
              jj_la1[38] = jj_gen;
              goto label_21; break;
            }
            constant();
          }label_21: ;
          
                                jjtn000.setTypeId(LexerTreeConstants.JJTCONSTANT);
        } else if (typ == LexerTreeConstants.JJTTERM) {
          while (true) {
            switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
            case LPAREN:
            case AT:
            case SYMBOL:
            case 143:
              ;
              break;
            default:
              jj_la1[39] = jj_gen;
              goto label_22; break;
            }
            term();
          }label_22: ;
          
                                jjtn000.setTypeId(LexerTreeConstants.JJTTERM);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token term() {
 /*@bgen(jjtree) TERM */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTTERM);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
        case LPAREN:
        case AT:
        case SYMBOL:
          t = function_term_or_constant();
          break;
        case 143:
          t = variable();
          break;
        default:
          jj_la1[40] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException(); break;
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

//Token function_term() #FUNCTION_TERM:
//{
//	Token t = token;
//}
//{
//	try {	
//	  t=function_head()
//	} catch (System.Exception e) {
//		this.error(e, t.beginLine, t.beginColumn);
//	}
//	{ 
//		jjtThis.setLine(t.beginLine);
//		jjtThis.setColumn(t.beginColumn);
//		return t;
//	}
//}
  public Token function_term_or_constant() {
 /*@bgen(jjtree) FUNCTION_TERM_OR_CONSTANT */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTFUNCTION_TERM_OR_CONSTANT);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = function_head_or_functor();
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token literal(int typ) {
 /*@bgen(jjtree) LITERAL */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTLITERAL);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        if (jj_2_62(2)) {
          t = atomic_formula(typ);
        } else if (jj_2_63(2)) {
          t = not_atomic_formula(typ);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token not_atomic_formula(int typ) {
 /*@bgen(jjtree) NOT_ATOMIC_FORMULA */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTNOT_ATOMIC_FORMULA);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(NOT);
        atomic_formula(typ);
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token f_comp() {
 /*@bgen(jjtree) F_COMP */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTF_COMP);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = binary_comp();
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token binary_comp() {
 /*@bgen(jjtree) BINARY_COMP */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTBINARY_COMP);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        if (jj_2_64(2)) {
          t = greater_comp();
        } else if (jj_2_65(2)) {
          t = less_comp();
        } else if (jj_2_66(2)) {
          t = greater_equal_comp();
        } else if (jj_2_67(2)) {
          t = less_equal_comp();
        } else if (jj_2_68(2)) {
          t = equal_comp();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token greater_comp() {
 /*@bgen(jjtree) GREATER_COMP */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTGREATER_COMP);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(GREATER);
        f_exp();
        f_exp();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token greater_equal_comp() {
 /*@bgen(jjtree) GREATER_EQUAL_COMP */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTGREATER_EQUAL_COMP);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(GEQUAL);
        f_exp();
        f_exp();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token less_equal_comp() {
 /*@bgen(jjtree) LESS_EQUAL_COMP */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTLESS_EQUAL_COMP);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(LEQUAL);
        f_exp();
        f_exp();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token less_comp() {
 /*@bgen(jjtree) LESS_COMP */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTLESS_COMP);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(LESS);
        f_exp();
        f_exp();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token equal_comp() {
 /*@bgen(jjtree) EQUAL_COMP */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTEQUAL_COMP);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(EQUAL);
        f_exp_or_term();
        f_exp_or_term();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token f_exp() {
 /*@bgen(jjtree) F_EXP */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTF_EXP);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
        case NUMBER:
          t = number();
          break;
        case 143:
          t = variable();
          break;
        default:
          jj_la1[41] = jj_gen;
          if (jj_2_69(2)) {
            t = op();
          } else if (jj_2_70(2)) {
            t = f_head();
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          } break;
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token number() {
 /*@bgen(jjtree) NUMBER */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTNUMBER);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(NUMBER);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                jjtn000.setImage(t.image);
                {if (true) return t;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token op() {
 /*@bgen(jjtree) OP */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTOP);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        if (jj_2_71(2)) {
          t = add_op();
        } else if (jj_2_72(2)) {
          t = substract_op();
        } else if (jj_2_73(2)) {
          t = multiply_op();
        } else if (jj_2_74(2)) {
          t = divide_op();
        } else if (jj_2_75(2)) {
          t = mod_op();
        } else if (jj_2_76(2)) {
          t = max_op();
        } else if (jj_2_77(2)) {
          t = min_op();
        } else if (jj_2_78(2)) {
          t = expt_op();
        } else if (jj_2_79(2)) {
          t = sqrt_op();
        } else if (jj_2_80(2)) {
          t = abs_op();
        } else if (jj_2_81(2)) {
          t = log_op();
        } else if (jj_2_82(2)) {
          t = exp_op();
        } else if (jj_2_83(2)) {
          t = round_op();
        } else if (jj_2_84(2)) {
          t = int_op();
        } else if (jj_2_85(2)) {
          t = floor_op();
        } else if (jj_2_86(2)) {
          t = ceil_op();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token add_op() {
 /*@bgen(jjtree) ADD_OP */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTADD_OP);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(ADD);
        while (true) {
          f_exp();
          switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
          case LPAREN:
          case NUMBER:
          case AT:
          case SYMBOL:
          case 143:
            ;
            break;
          default:
            jj_la1[42] = jj_gen;
            goto label_23; break;
          }
        }label_23: ;
        
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token substract_op() {
 /*@bgen(jjtree) SUBSTRACT_OP */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTSUBSTRACT_OP);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(SUB);
        while (true) {
          f_exp();
          switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
          case LPAREN:
          case NUMBER:
          case AT:
          case SYMBOL:
          case 143:
            ;
            break;
          default:
            jj_la1[43] = jj_gen;
            goto label_24; break;
          }
        }label_24: ;
        
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token multiply_op() {
 /*@bgen(jjtree) MULTIPLY_OP */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTMULTIPLY_OP);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(MUL);
        f_exp();
        while (true) {
          f_exp();
          switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
          case LPAREN:
          case NUMBER:
          case AT:
          case SYMBOL:
          case 143:
            ;
            break;
          default:
            jj_la1[44] = jj_gen;
            goto label_25; break;
          }
        }label_25: ;
        
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token divide_op() {
 /*@bgen(jjtree) DIVIDE_OP */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTDIVIDE_OP);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(DIV);
        f_exp();
        while (true) {
          f_exp();
          switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
          case LPAREN:
          case NUMBER:
          case AT:
          case SYMBOL:
          case 143:
            ;
            break;
          default:
            jj_la1[45] = jj_gen;
            goto label_26; break;
          }
        }label_26: ;
        
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token mod_op() {
 /*@bgen(jjtree) MOD_OP */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTMOD_OP);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(MOD);
        while (true) {
          f_exp();
          switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
          case LPAREN:
          case NUMBER:
          case AT:
          case SYMBOL:
          case 143:
            ;
            break;
          default:
            jj_la1[46] = jj_gen;
            goto label_27; break;
          }
        }label_27: ;
        
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token max_op() {
 /*@bgen(jjtree) MAX_OP */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTMAX_OP);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(MAX);
        while (true) {
          f_exp();
          switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
          case LPAREN:
          case NUMBER:
          case AT:
          case SYMBOL:
          case 143:
            ;
            break;
          default:
            jj_la1[47] = jj_gen;
            goto label_28; break;
          }
        }label_28: ;
        
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token min_op() {
 /*@bgen(jjtree) MIN_OP */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTMIN_OP);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(MIN);
        while (true) {
          f_exp();
          switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
          case LPAREN:
          case NUMBER:
          case AT:
          case SYMBOL:
          case 143:
            ;
            break;
          default:
            jj_la1[48] = jj_gen;
            goto label_29; break;
          }
        }label_29: ;
        
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token expt_op() {
 /*@bgen(jjtree) EXPT_OP */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTEXPT_OP);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(EXPT);
        f_exp();
        while (true) {
          f_exp();
          switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
          case LPAREN:
          case NUMBER:
          case AT:
          case SYMBOL:
          case 143:
            ;
            break;
          default:
            jj_la1[49] = jj_gen;
            goto label_30; break;
          }
        }label_30: ;
        
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token sqrt_op() {
 /*@bgen(jjtree) SQRT_OP */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTSQRT_OP);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(SQRT);
        f_exp();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token abs_op() {
 /*@bgen(jjtree) ABS_OP */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTABS_OP);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(ABS);
        while (true) {
          f_exp();
          switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
          case LPAREN:
          case NUMBER:
          case AT:
          case SYMBOL:
          case 143:
            ;
            break;
          default:
            jj_la1[50] = jj_gen;
            goto label_31; break;
          }
        }label_31: ;
        
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token log_op() {
 /*@bgen(jjtree) LOG_OP */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTLOG_OP);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(LOG);
        f_exp();
        switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
        case LPAREN:
        case NUMBER:
        case AT:
        case SYMBOL:
        case 143:
          f_exp();
          break;
        default:
          jj_la1[51] = jj_gen;
          ; break;
        }
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token exp_op() {
 /*@bgen(jjtree) EXP_OP */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTEXP_OP);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(EXP);
        f_exp();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token round_op() {
 /*@bgen(jjtree) ROUND_OP */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTROUND_OP);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(ROUND);
        f_exp();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token int_op() {
 /*@bgen(jjtree) INT_OP */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTINT_OP);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(INT);
        f_exp();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token floor_op() {
 /*@bgen(jjtree) FLOOR_OP */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTFLOOR_OP);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(FLOOR);
        f_exp();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token ceil_op() {
 /*@bgen(jjtree) CEIL_OP */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTCEIL_OP);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(CEIL);
        f_exp();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token f_head() {
 /*@bgen(jjtree) F_HEAD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTF_HEAD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = function_head_or_functor();
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token function_head() {
 /*@bgen(jjtree) FUNCTION_HEAD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTFUNCTION_HEAD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        functor();
        while (true) {
          switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
          case LPAREN:
          case AT:
          case SYMBOL:
          case 143:
            ;
            break;
          default:
            jj_la1[52] = jj_gen;
            goto label_32; break;
          }
          term();
        }label_32: ;
        
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token function_head_or_functor() {
 /*@bgen(jjtree) FUNCTION_HEAD_OR_FUNCTOR */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTFUNCTION_HEAD_OR_FUNCTOR);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
        case LPAREN:
          t = function_head();
          break;
        case AT:
        case SYMBOL:
          t = functor();
          break;
        default:
          jj_la1[53] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException(); break;
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token declare_defined_symbols() {
 /*@bgen(jjtree) DECLARE_DEFINED_SYMBOLS */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTDECLARE_DEFINED_SYMBOLS);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(DECLARE_DEFINED_SYMBOLS);
        while (true) {
          switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
          case LPAREN:
            ;
            break;
          default:
            jj_la1[54] = jj_gen;
            goto label_33; break;
          }
          defined_formula_declaration();
        }label_33: ;
        
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token structure_def() {
 /*@bgen(jjtree) STRUCTURE_DEF */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTSTRUCTURE_DEF);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        if (jj_2_87(2)) {
          t = action_def();
        } else if (jj_2_88(2)) {
          t = durative_action_def();
        } else if (jj_2_89(2)) {
          t = defined_formula();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token defined_formula_declaration() {
 /*@bgen(jjtree) DEFINED_FORMULA_DECLARATION */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTDEFINED_FORMULA_DECLARATION);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        if (jj_2_90(2)) {
          t = derived_def_declaration();
        } else if (jj_2_91(2)) {
          t = defined_predicate_declaration();
        } else if (jj_2_92(2)) {
          t = defined_function_declaration();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token defined_formula() {
 /*@bgen(jjtree) DEFINED_FORMULA */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTDEFINED_FORMULA);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        if (jj_2_93(2)) {
          t = derived_def();
        } else if (jj_2_94(2)) {
          t = defined_predicate();
        } else if (jj_2_95(2)) {
          t = defined_function();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token action_def() {
 /*@bgen(jjtree) ACTION_DEF */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTACTION_DEF);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(ACTION);
        action_name();
        switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
        case PRIORITY:
          jj_consume_token(PRIORITY);
          number();
          break;
        default:
          jj_la1[55] = jj_gen;
          ; break;
        }
        jj_consume_token(PARAMETERS);
        jj_consume_token(LPAREN);
        typed_list(LexerTreeConstants.JJTVARIABLE);
        jj_consume_token(RPAREN);
        action_def_body();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token action_name() {
 /*@bgen(jjtree) ACTION_NAME */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTACTION_NAME);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(SYMBOL);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                jjtn000.setImage(t.image);
                {if (true) return t;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token action_def_body() {
 /*@bgen(jjtree) ACTION_DEF_BODY */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTACTION_DEF_BODY);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(PRECONDITION);
        pre_gd();
        jj_consume_token(EFFECT);
        effect();
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token pre_gd() {
 /*@bgen(jjtree) PRE_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTPRE_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        if (jj_2_96(2)) {
          t = empty_or();
        } else if (jj_2_97(2)) {
          t = and_pre_gd();
        } else if (jj_2_98(2)) {
          t = forall_pre_gd();
        } else if (jj_2_99(2)) {
          t = pref_gd();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token empty_or() {
 /*@bgen(jjtree) EMPTY_OR */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTEMPTY_OR);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token and_pre_gd() {
 /*@bgen(jjtree) AND_PRE_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTAND_PRE_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(AND);
        while (true) {
          switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
          case LPAREN:
            ;
            break;
          default:
            jj_la1[56] = jj_gen;
            goto label_34; break;
          }
          pre_gd();
        }label_34: ;
        
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token forall_pre_gd() {
 /*@bgen(jjtree) FORALL_PRE_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTFORALL_PRE_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(FORALL);
        jj_consume_token(LPAREN);
        typed_list(LexerTreeConstants.JJTVARIABLE);
        jj_consume_token(RPAREN);
        pre_gd();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token pref_gd() {
 /*@bgen(jjtree) PREF_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTPREF_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        if (jj_2_100(2)) {
          t = named_pref_gd();
        } else {
          switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
          case LPAREN:
            t = gd();
            break;
          default:
            jj_la1[57] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException(); break;
          }
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token named_pref_gd() {
 /*@bgen(jjtree) NAMED_PREF_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTNAMED_PREF_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(PREFERENCE);
        switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
        case SYMBOL:
          pref_name();
          break;
        default:
          jj_la1[58] = jj_gen;
          ; break;
        }
        gd();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);

                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token pref_name() {
 /*@bgen(jjtree) PREF_NAME */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTPREF_NAME);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(SYMBOL);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                jjtn000.setImage(t.image);
                {if (true) return t;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token effect() {
 /*@bgen(jjtree) EFFECT */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTEFFECT);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        if (jj_2_101(2)) {
          t = and_c_effect();
        } else if (jj_2_102(2)) {
          t = c_effect();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token and_c_effect() {
 /*@bgen(jjtree) AND_C_EFFECT */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTAND_C_EFFECT);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(AND);
        while (true) {
          switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
          case LPAREN:
            ;
            break;
          default:
            jj_la1[59] = jj_gen;
            goto label_35; break;
          }
          c_effect();
        }label_35: ;
        
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token c_effect() {
 /*@bgen(jjtree) C_EFFECT */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTC_EFFECT);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        if (jj_2_103(2)) {
          t = forall_effect();
        } else if (jj_2_104(2)) {
          t = when_con_effect();
        } else if (jj_2_105(2)) {
          t = p_effect();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token forall_effect() {
 /*@bgen(jjtree) FORALL_EFFECT */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTFORALL_EFFECT);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(FORALL);
        jj_consume_token(LPAREN);
        typed_list(LexerTreeConstants.JJTVARIABLE);
        jj_consume_token(RPAREN);
        effect();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token when_con_effect() {
 /*@bgen(jjtree) WHEN_CON_EFFECT */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTWHEN_CON_EFFECT);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(WHEN);
        gd();
        cond_effect();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token cond_effect() {
 /*@bgen(jjtree) COND_EFFECT */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTCOND_EFFECT);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        if (jj_2_106(2)) {
          t = and_p_effect();
        } else if (jj_2_107(2)) {
          t = p_effect();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token and_p_effect() {
 /*@bgen(jjtree) AND_P_EFFECT */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTAND_P_EFFECT);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(AND);
        while (true) {
          switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
          case LPAREN:
            ;
            break;
          default:
            jj_la1[60] = jj_gen;
            goto label_36; break;
          }
          p_effect();
        }label_36: ;
        
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token p_effect() {
 /*@bgen(jjtree) P_EFFECT */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTP_EFFECT);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        if (jj_2_108(2)) {
          t = jj_consume_token(LPAREN);
          jj_consume_token(ASSIGN);
          function_head_or_functor();
          f_exp_or_term_or_undefined();
          jj_consume_token(RPAREN);
        } else if (jj_2_109(2)) {
          t = assign_op(LexerTreeConstants.JJTF_EXP);
        } else if (jj_2_110(2)) {
          t = literal(LexerTreeConstants.JJTTERM);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token f_exp_or_term() {
 /*@bgen(jjtree) F_EXP_OR_TERM */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTF_EXP_OR_TERM);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        if (jj_2_111(2)) {
          t = function_head_or_functor();
        } else if (jj_2_112(2)) {
          t = term();
        } else if (jj_2_113(2)) {
          t = f_exp();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token f_exp_or_term_or_undefined() {
 /*@bgen(jjtree) F_EXP_OR_TERM_OR_UNDEFINED */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTF_EXP_OR_TERM_OR_UNDEFINED);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
        case UNDEFINED:
          t = jj_consume_token(UNDEFINED);
          break;
        case LPAREN:
        case NUMBER:
        case AT:
        case SYMBOL:
        case 143:
          t = f_exp_or_term();
          break;
        default:
          jj_la1[61] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException(); break;
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                jjtn000.setTypeId(t.kind);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token assign_op(int typ) {
 /*@bgen(jjtree) ASSIGN_OP */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTASSIGN_OP);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        if (jj_2_114(2)) {
          t = assign(typ);
        } else if (jj_2_115(2)) {
          t = scale_up(typ);
        } else if (jj_2_116(2)) {
          t = scale_down(typ);
        } else if (jj_2_117(2)) {
          t = increase(typ);
        } else if (jj_2_118(2)) {
          t = decrease(typ);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token assign(int typ) {
 /*@bgen(jjtree) ASSIGN */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTASSIGN);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(ASSIGN);
        f_head();
        if (typ == LexerTreeConstants.JJTF_EXP) {
          f_exp();
        } else if (typ == LexerTreeConstants.JJTF_EXP_DA) {
          f_exp_da();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.setTypeId(typ);
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token scale_up(int typ) {
 /*@bgen(jjtree) SCALE_UP */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTSCALE_UP);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(SCALE_UP);
        f_head();
        if (typ == LexerTreeConstants.JJTF_EXP) {
          f_exp();
        } else if (typ == LexerTreeConstants.JJTF_EXP_DA) {
          f_exp_da();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.setTypeId(typ);
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token scale_down(int typ) {
 /*@bgen(jjtree) SCALE_DOWN */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTSCALE_DOWN);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(SCALE_DOWN);
        f_head();
        if (typ == LexerTreeConstants.JJTF_EXP) {
          f_exp();
        } else if (typ == LexerTreeConstants.JJTF_EXP_DA) {
          f_exp_da();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.setTypeId(typ);
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token increase(int typ) {
 /*@bgen(jjtree) INCREASE */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTINCREASE);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(INCREASE);
        f_head();
        if (typ == LexerTreeConstants.JJTF_EXP) {
          f_exp();
        } else if (typ == LexerTreeConstants.JJTF_EXP_DA) {
          f_exp_da();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.setTypeId(typ);
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token decrease(int typ) {
 /*@bgen(jjtree) DECREASE */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTDECREASE);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(DECREASE);
        f_head();
        if (typ == LexerTreeConstants.JJTF_EXP) {
          f_exp();
        } else if (typ == LexerTreeConstants.JJTF_EXP_DA) {
          f_exp_da();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.setTypeId(typ);
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token durative_action_def() {
 /*@bgen(jjtree) DURATION_ACTION_DEF */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTDURATION_ACTION_DEF);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(DURATIVE_ACTION);
        action_name();
        switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
        case PRIORITY:
          jj_consume_token(PRIORITY);
          number();
          break;
        default:
          jj_la1[62] = jj_gen;
          ; break;
        }
        jj_consume_token(PARAMETERS);
        jj_consume_token(LPAREN);
        typed_list(LexerTreeConstants.JJTVARIABLE);
        jj_consume_token(RPAREN);
        da_def_body();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token da_def_body() {
 /*@bgen(jjtree) DA_DEF_BODY */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTDA_DEF_BODY);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(DURATION);
        duration_constraint();
        jj_consume_token(CONDITION);
        da_gd();
        jj_consume_token(EFFECT);
        da_effect();
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token duration_constraint() {
 /*@bgen(jjtree) DURATION_CONSTRAINT */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTDURATION_CONSTRAINT);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        if (jj_2_119(2)) {
          t = empty_or();
        } else if (jj_2_120(2)) {
          t = and_simple_duration_constraint();
        } else if (jj_2_121(2)) {
          t = simple_duration_constraint();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token and_simple_duration_constraint() {
 /*@bgen(jjtree) AND_SIMPLE_DURATION_CONSTRAINT */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTAND_SIMPLE_DURATION_CONSTRAINT);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(AND);
        while (true) {
          simple_duration_constraint();
          switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
          case LPAREN:
            ;
            break;
          default:
            jj_la1[63] = jj_gen;
            goto label_37; break;
          }
        }label_37: ;
        
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token simple_duration_constraint() {
 /*@bgen(jjtree) SIMPLE_DURATION_CONSTRAINT */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTSIMPLE_DURATION_CONSTRAINT);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        if (jj_2_122(2)) {
          t = d_op();
        } else if (jj_2_123(2)) {
          t = at_simple_duration_constraint();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token at_simple_duration_constraint() {
 /*@bgen(jjtree) AT_SIMPLE_DURATION_CONSTRAINT */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTAT_SIMPLE_DURATION_CONSTRAINT);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        if (jj_2_124(3)) {
          t = at_start_simple_duration_constraint();
        } else if (jj_2_125(3)) {
          t = at_end_simple_duration_constraint();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token at_start_simple_duration_constraint() {
 /*@bgen(jjtree) AT_START_SIMPLE_DURATION_CONSTRAINT */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTAT_START_SIMPLE_DURATION_CONSTRAINT);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(AT);
        jj_consume_token(START);
        simple_duration_constraint();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token at_end_simple_duration_constraint() {
 /*@bgen(jjtree) AT_END_SIMPLE_DURATION_CONSTRAINT */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTAT_END_SIMPLE_DURATION_CONSTRAINT);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(AT);
        jj_consume_token(END);
        simple_duration_constraint();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token d_op() {
 /*@bgen(jjtree) D_OP */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTD_OP);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        if (jj_2_126(2)) {
          t = equal_d_op();
        } else if (jj_2_127(2)) {
          t = gequal_d_op();
        } else if (jj_2_128(2)) {
          t = lequal_d_op();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token equal_d_op() {
 /*@bgen(jjtree) EQUAL_D_OP */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTEQUAL_D_OP);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(EQUAL);
        var_duration();
        d_value();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token gequal_d_op() {
 /*@bgen(jjtree) GEQUAL_D_OP */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTGEQUAL_D_OP);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(GEQUAL);
        var_duration();
        d_value();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token lequal_d_op() {
 /*@bgen(jjtree) LEQUAL_D_OP */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTLEQUAL_D_OP);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(LEQUAL);
        var_duration();
        d_value();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token var_duration() {
 /*@bgen(jjtree) VAR_DURATION */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTVAR_DURATION);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(VAR_DURATION);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token d_value() {
 /*@bgen(jjtree) D_VALUE */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTD_VALUE);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        if (jj_2_129(2)) {
          t = number();
        } else if (jj_2_130(2)) {
          t = f_exp();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token da_gd() {
 /*@bgen(jjtree) DA_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTDA_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        if (jj_2_131(2)) {
          t = pref_timed_gd();
        } else if (jj_2_132(2)) {
          t = and_da_gd();
        } else if (jj_2_133(2)) {
          t = forall_da_gd();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token forall_da_gd() {
 /*@bgen(jjtree) FORALL_DA_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTFORALL_DA_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(FORALL);
        jj_consume_token(LPAREN);
        typed_list(LexerTreeConstants.JJTVARIABLE);
        jj_consume_token(RPAREN);
        da_gd();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token and_da_gd() {
 /*@bgen(jjtree) AND_DA_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTAND_DA_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(AND);
        while (true) {
          switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
          case LPAREN:
            ;
            break;
          default:
            jj_la1[64] = jj_gen;
            goto label_38; break;
          }
          da_gd();
        }label_38: ;
        
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token pref_timed_gd() {
 /*@bgen(jjtree) PREF_TIMED_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTPREF_TIMED_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        if (jj_2_134(2)) {
          t = timed_gd();
        } else if (jj_2_135(2)) {
          t = named_pref_timed_gd();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token named_pref_timed_gd() {
 /*@bgen(jjtree) NAMED_PREF_TIMED_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTNAMED_PREF_TIMED_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(PREFERENCE);
        switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
        case SYMBOL:
          pref_name();
          break;
        default:
          jj_la1[65] = jj_gen;
          ; break;
        }
        timed_gd();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token timed_gd() {
 /*@bgen(jjtree) TIMED_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTTIMED_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        if (jj_2_136(2)) {
          t = at_timed_gd();
        } else if (jj_2_137(2)) {
          t = over_timed_gd();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token over_timed_gd() {
 /*@bgen(jjtree) OVER_TIMED_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTOVER_TIMED_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = over_all_timed_gd();
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token over_all_timed_gd() {
 /*@bgen(jjtree) OVER_ALL_TIMED_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTOVER_ALL_TIMED_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(OVER);
        jj_consume_token(ALL);
        gd();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token at_timed_gd() {
 /*@bgen(jjtree) AT_TIMED_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTAT_TIMED_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        if (jj_2_138(3)) {
          t = at_start_timed_gd();
        } else if (jj_2_139(2)) {
          t = at_end_timed_gd();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token at_start_timed_gd() {
 /*@bgen(jjtree) AT_START_TIMED_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTAT_START_TIMED_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(AT);
        jj_consume_token(START);
        gd();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token at_end_timed_gd() {
 /*@bgen(jjtree) AT_END_TIMED_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTAT_END_TIMED_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(AT);
        jj_consume_token(END);
        gd();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token interval() {
 /*@bgen(jjtree) INTERVAL */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTINTERVAL);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(ALL);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token da_effect() {
 /*@bgen(jjtree) DA_EFFECT */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTDA_EFFECT);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        if (jj_2_140(2)) {
          t = timed_effect();
        } else if (jj_2_141(2)) {
          t = and_da_effect();
        } else if (jj_2_142(2)) {
          t = forall_da_effect();
        } else if (jj_2_143(2)) {
          t = when_da_effect();
        } else if (jj_2_144(2)) {
          t = assign_op(LexerTreeConstants.JJTF_EXP_DA);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token when_da_effect() {
 /*@bgen(jjtree) WHEN_DA_EFFECT */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTWHEN_DA_EFFECT);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(WHEN);
        da_gd();
        timed_effect();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token forall_da_effect() {
 /*@bgen(jjtree) FORALL_DA_EFFECT */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTFORALL_DA_EFFECT);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(FORALL);
        jj_consume_token(LPAREN);
        typed_list(LexerTreeConstants.JJTVARIABLE);
        jj_consume_token(RPAREN);
        da_effect();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token and_da_effect() {
 /*@bgen(jjtree) AND_DA_EFFECT */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTAND_DA_EFFECT);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(AND);
        while (true) {
          switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
          case LPAREN:
            ;
            break;
          default:
            jj_la1[66] = jj_gen;
            goto label_39; break;
          }
          da_effect();
        }label_39: ;
        
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token timed_effect() {
 /*@bgen(jjtree) TIMED_EFFECT */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTTIMED_EFFECT);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        if (jj_2_145(5)) {
          t = at_f_assign_da_effect();
        } else if (jj_2_146(2)) {
          t = at_da_effect();
        } else if (jj_2_147(2)) {
          t = assign_op_t();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token at_f_assign_da_effect() {
 /*@bgen(jjtree) AT_F_ASSIGN_DA_EFFECT */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTAT_F_ASSIGN_DA_EFFECT);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        if (jj_2_148(3)) {
          t = at_start_f_assign_da_effect();
        } else if (jj_2_149(3)) {
          t = at_end_f_assign_da_effect();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token at_start_f_assign_da_effect() {
 /*@bgen(jjtree) AT_START_F_ASSIGN_DA_EFFECT */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTAT_START_F_ASSIGN_DA_EFFECT);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(AT);
        jj_consume_token(START);
        assign_op(LexerTreeConstants.JJTF_EXP_DA);
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token at_end_f_assign_da_effect() {
 /*@bgen(jjtree) AT_END_F_ASSIGN_DA_EFFECT */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTAT_END_F_ASSIGN_DA_EFFECT);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(AT);
        jj_consume_token(END);
        assign_op(LexerTreeConstants.JJTF_EXP_DA);
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token at_da_effect() {
 /*@bgen(jjtree) AT_DA_EFFECT */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTAT_DA_EFFECT);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        if (jj_2_150(3)) {
          t = at_start_da_effect();
        } else if (jj_2_151(3)) {
          t = at_end_da_effect();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token at_start_da_effect() {
 /*@bgen(jjtree) AT_START_DA_EFFECT */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTAT_START_DA_EFFECT);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(AT);
        jj_consume_token(START);
        effect();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token at_end_da_effect() {
 /*@bgen(jjtree) AT_END_DA_EFFECT */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTAT_END_DA_EFFECT);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(AT);
        jj_consume_token(END);
        effect();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token assign_op_t() {
 /*@bgen(jjtree) ASSIGN_OP_T */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTASSIGN_OP_T);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        if (jj_2_152(2)) {
          t = increase_assign_op_t();
        } else if (jj_2_153(2)) {
          t = decrease_assign_op_t();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token increase_assign_op_t() {
 /*@bgen(jjtree) INCREASE_ASSIGN_OP_T */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTINCREASE_ASSIGN_OP_T);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(INCREASE);
        f_head();
        f_exp_t();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token decrease_assign_op_t() {
 /*@bgen(jjtree) DECREASE_ASSIGN_OP_T */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTDECREASE_ASSIGN_OP_T);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(DECREASE);
        f_head();
        f_exp_t();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token f_exp_t() {
 /*@bgen(jjtree) F_EXP_T */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTF_EXP_T);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        if (jj_2_154(2)) {
          t = jj_consume_token(LPAREN);
          jj_consume_token(MUL);
          continous_variable();
          f_exp();
          jj_consume_token(RPAREN);
        } else if (jj_2_155(2)) {
          t = jj_consume_token(LPAREN);
          jj_consume_token(MUL);
          f_exp();
          continous_variable();
          jj_consume_token(RPAREN);
        } else if (jj_2_156(2)) {
          t = continous_variable();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token continous_variable() {
 /*@bgen(jjtree) CONTINOUS_VARIABLE */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTCONTINOUS_VARIABLE);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(CONTINOUS_VARIABLE);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                jjtn000.setImage(t.image);
                {if (true) return t;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token f_exp_da() {
 /*@bgen(jjtree) F_EXP_DA */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTF_EXP_DA);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        if (jj_2_157(3)) {
          t = f_exp();
        } else if (jj_2_158(3)) {
          t = da_op();
        } else if (jj_2_159(3)) {
          t = var_duration();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token da_op() {
 /*@bgen(jjtree) DA_OP */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTDA_OP);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        if (jj_2_160(2)) {
          t = da_add_op();
        } else if (jj_2_161(2)) {
          t = da_substract_op();
        } else if (jj_2_162(2)) {
          t = da_multiply_op();
        } else if (jj_2_163(2)) {
          t = da_divide_op();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token da_add_op() {
 /*@bgen(jjtree) DA_ADD_OP */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTDA_ADD_OP);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(ADD);
        f_exp_da();
        while (true) {
          f_exp_da();
          switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
          case LPAREN:
          case NUMBER:
          case AT:
          case VAR_DURATION:
          case SYMBOL:
          case 143:
            ;
            break;
          default:
            jj_la1[67] = jj_gen;
            goto label_40; break;
          }
        }label_40: ;
        
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token da_substract_op() {
 /*@bgen(jjtree) DA_SUBSTRACT_OP */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTDA_SUBSTRACT_OP);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(SUB);
        while (true) {
          f_exp_da();
          switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
          case LPAREN:
          case NUMBER:
          case AT:
          case VAR_DURATION:
          case SYMBOL:
          case 143:
            ;
            break;
          default:
            jj_la1[68] = jj_gen;
            goto label_41; break;
          }
        }label_41: ;
        
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token da_multiply_op() {
 /*@bgen(jjtree) DA_MULTIPLY_OP */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTDA_MULTIPLY_OP);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(MUL);
        f_exp_da();
        while (true) {
          f_exp_da();
          switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
          case LPAREN:
          case NUMBER:
          case AT:
          case VAR_DURATION:
          case SYMBOL:
          case 143:
            ;
            break;
          default:
            jj_la1[69] = jj_gen;
            goto label_42; break;
          }
        }label_42: ;
        
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token da_divide_op() {
 /*@bgen(jjtree) DA_DIVIDE_OP */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTDA_DIVIDE_OP);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(DIV);
        f_exp_da();
        while (true) {
          f_exp_da();
          switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
          case LPAREN:
          case NUMBER:
          case AT:
          case VAR_DURATION:
          case SYMBOL:
          case 143:
            ;
            break;
          default:
            jj_la1[70] = jj_gen;
            goto label_43; break;
          }
        }label_43: ;
        
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token derived_def() {
 /*@bgen(jjtree) DERIVED_DEF */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTDERIVED_DEF);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(DERIVED);
        atomic_formula_skeleton();
        gd();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token derived_def_declaration() {
 /*@bgen(jjtree) DERIVED_DEF_DECLARATION */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTDERIVED_DEF_DECLARATION);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(DERIVED);
        atomic_formula_skeleton();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token defined_predicate() {
 /*@bgen(jjtree) DEFINED_PREDICATE */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTDEFINED_PREDICATE);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(DEFINED_PREDICATE);
        atomic_formula_skeleton();
        if (jj_2_164(2)) {
          local_vars();
        } else {
          ;
        }
        gd();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token defined_predicate_declaration() {
 /*@bgen(jjtree) DEFINED_PREDICATE_DECLARATION */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTDEFINED_PREDICATE_DECLARATION);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(DEFINED_PREDICATE);
        atomic_formula_skeleton();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token defined_function() {
 /*@bgen(jjtree) DEFINED_FUNCTION */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTDEFINED_FUNCTION);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(DEFINED_FUNCTION);
        typed_function();
        if (jj_2_165(2)) {
          local_vars();
        } else {
          ;
        }
        gd();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token defined_function_declaration() {
 /*@bgen(jjtree) DEFINED_FUNCTION_DECLARATION */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTDEFINED_FUNCTION_DECLARATION);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(DEFINED_FUNCTION);
        typed_function();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token local_vars() {
 /*@bgen(jjtree) LOCAL_VARS */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTLOCAL_VARS);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(LOCAL_VARS);
        function_typed_list(LexerTreeConstants.JJTVARIABLE);
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token problem() {
 /*@bgen(jjtree) PROBLEM */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTPROBLEM);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(DEFINE);
        jj_consume_token(LPAREN);
        jj_consume_token(PROBLEM);
        problem_name();
        jj_consume_token(RPAREN);
        jj_consume_token(LPAREN);
        jj_consume_token(P_DOMAIN);
        domain_name();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
      if (jj_2_166(2)) {
        require_def();
      } else {
        ;
      }
      if (jj_2_167(2)) {
        object_declaration();
      } else {
        ;
      }
      init();
      goal();
      if (jj_2_168(2)) {
        constraints();
      } else {
        ;
      }
      if (jj_2_169(2)) {
        metric_spec();
      } else {
        ;
      }
      jj_consume_token(RPAREN);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token problem_name() {
 /*@bgen(jjtree) PROBLEM_NAME */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTPROBLEM_NAME);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(SYMBOL);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                jjtn000.setImage(t.image);
                {if (true) return t;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token domain_name() {
 /*@bgen(jjtree) DOMAIN_NAME */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTDOMAIN_NAME);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(SYMBOL);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                jjtn000.setImage(t.image);
                {if (true) return t;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token object_declaration() {
 /*@bgen(jjtree) OBJECT_DECLARATION */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTOBJECT_DECLARATION);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(OBJECTS);
        typed_list(LexerTreeConstants.JJTCONSTANT);
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token init() {
 /*@bgen(jjtree) INIT */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTINIT);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(INIT);
        while (true) {
          switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
          case LPAREN:
            ;
            break;
          default:
            jj_la1[71] = jj_gen;
            goto label_44; break;
          }
          init_el();
        }label_44: ;
        
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token init_el() {
 /*@bgen(jjtree) INIT_EL */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTINIT_EL);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        if (jj_2_170(3)) {
          t = timed_literal();
        } else if (jj_2_171(2)) {
          t = literal(LexerTreeConstants.JJTCONSTANT);
        } else if (jj_2_172(2)) {
          t = equal_init_el();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token equal_init_el() {
 /*@bgen(jjtree) EQUAL_INIT_EL */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTEQUAL_INIT_EL);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(EQUAL);
        constant_function_head_or_functor();
        number_or_constant();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token number_or_constant() {
 /*@bgen(jjtree) NUMBER_OR_CONSTANT */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTNUMBER_OR_CONSTANT);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
        case NUMBER:
          t = number();
          break;
        case SYMBOL:
          t = constant();
          break;
        default:
          jj_la1[72] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException(); break;
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token timed_literal() {
 /*@bgen(jjtree) TIMED_LITERAL */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTTIMED_LITERAL);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(AT);
        number();
        literal(LexerTreeConstants.JJTCONSTANT);
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token goal() {
 /*@bgen(jjtree) GOAL */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTGOAL);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(GOAL);
        pre_gd();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token constraints() {
 /*@bgen(jjtree) CONSTRAINTS */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTCONSTRAINTS);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(CONSTRAINTS);
        pref_con_gd();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token pref_con_gd() {
 /*@bgen(jjtree) PREF_CON_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTPREF_CON_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        if (jj_2_173(2)) {
          t = and_pref_con_gd();
        } else if (jj_2_174(2)) {
          t = forall_pref_con_gd();
        } else if (jj_2_175(2)) {
          t = named_pref_con_gd();
        } else if (jj_2_176(2)) {
          t = con_gd();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token and_pref_con_gd() {
 /*@bgen(jjtree) AND_PREF_CON_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTAND_PREF_CON_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(AND);
        while (true) {
          switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
          case LPAREN:
            ;
            break;
          default:
            jj_la1[73] = jj_gen;
            goto label_45; break;
          }
          pref_con_gd();
        }label_45: ;
        
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token named_pref_con_gd() {
 /*@bgen(jjtree) NAMED_PREF_CON_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTNAMED_PREF_CON_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(PREFERENCE);
        switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
        case SYMBOL:
          pref_name();
          break;
        default:
          jj_la1[74] = jj_gen;
          ; break;
        }
        con_gd();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token forall_pref_con_gd() {
 /*@bgen(jjtree) FORALL_PREF_CON_GD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTFORALL_PREF_CON_GD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(FORALL);
        jj_consume_token(LPAREN);
        typed_list(LexerTreeConstants.JJTVARIABLE);
        jj_consume_token(RPAREN);
        pref_con_gd();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token metric_spec() {
 /*@bgen(jjtree) METRIC_SPEC */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTMETRIC_SPEC);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        if (jj_2_177(3)) {
          t = maximize();
        } else if (jj_2_178(3)) {
          t = minimize();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token maximize() {
 /*@bgen(jjtree) MAXIMIZE */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTMAXIMIZE);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(METRIC);
        jj_consume_token(MAXIMIZE);
        metric_f_exp();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token minimize() {
 /*@bgen(jjtree) MINIMIZE */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTMINIMIZE);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(METRIC);
        jj_consume_token(MINIMIZE);
        metric_f_exp();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token metric_f_exp() {
 /*@bgen(jjtree) METRIC_F_EXP */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTMETRIC_F_EXP);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        if (jj_2_179(2)) {
          t = multi_op_metric_f_exp();
        } else if (jj_2_180(2)) {
          t = number();
        } else if (jj_2_181(2)) {
          t = constant_f_head();
        } else if (jj_2_182(2)) {
          t = total_time();
        } else if (jj_2_183(2)) {
          t = violated_pref_exp();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token violated_pref_exp() {
 /*@bgen(jjtree) VIOLATED_PREF_EXP */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTVIOLATED_PREF_EXP);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(IS_VIOLATED);
        pref_name();
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token constant_f_head() {
 /*@bgen(jjtree) CONSTANT_F_HEAD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTCONSTANT_F_HEAD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = constant_function_head_or_functor();
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token constant_function_head() {
 /*@bgen(jjtree) CONSTANT_FUNCTION_HEAD */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTCONSTANT_FUNCTION_HEAD);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        functor();
        while (true) {
          switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
          case SYMBOL:
            ;
            break;
          default:
            jj_la1[75] = jj_gen;
            goto label_46; break;
          }
          constant();
        }label_46: ;
        
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token constant_function_head_or_functor() {
 /*@bgen(jjtree) CONSTANT_FUNCTION_HEAD_OR_FUNCTOR */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTCONSTANT_FUNCTION_HEAD_OR_FUNCTOR);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
        case LPAREN:
          t = constant_function_head();
          break;
        case AT:
        case SYMBOL:
          t = functor();
          break;
        default:
          jj_la1[76] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException(); break;
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token total_time() {
 /*@bgen(jjtree) TOTAL_TIME */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTTOTAL_TIME);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
        case TOTAL_TIME:
          t = jj_consume_token(TOTAL_TIME);
          break;
        case LPAREN:
          t = jj_consume_token(LPAREN);
          jj_consume_token(TOTAL_TIME);
          jj_consume_token(RPAREN);
          break;
        default:
          jj_la1[77] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException(); break;
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token multi_op_metric_f_exp() {
 /*@bgen(jjtree) MULTI_OP_METRIC_F_EXP */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTMULTI_OP_METRIC_F_EXP);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        if (jj_2_184(2)) {
          t = add_narity_op_metric_f_exp();
        } else if (jj_2_185(2)) {
          t = substract_narity_op_metric_f_exp();
        } else if (jj_2_186(2)) {
          t = multiply_narity_op_metric_f_exp();
        } else if (jj_2_187(2)) {
          t = divide_narity_op_metric_f_exp();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token multiply_narity_op_metric_f_exp() {
 /*@bgen(jjtree) MULTIPLY_NARITY_OP_METRIC_F_EXP */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTMULTIPLY_NARITY_OP_METRIC_F_EXP);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(MUL);
        metric_f_exp();
        while (true) {
          metric_f_exp();
          switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
          case LPAREN:
          case NUMBER:
          case AT:
          case TOTAL_TIME:
          case SYMBOL:
            ;
            break;
          default:
            jj_la1[78] = jj_gen;
            goto label_47; break;
          }
        }label_47: ;
        
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token divide_narity_op_metric_f_exp() {
 /*@bgen(jjtree) DIVIDE_NARITY_OP_METRIC_F_EXP */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTDIVIDE_NARITY_OP_METRIC_F_EXP);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(DIV);
        metric_f_exp();
        while (true) {
          metric_f_exp();
          switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
          case LPAREN:
          case NUMBER:
          case AT:
          case TOTAL_TIME:
          case SYMBOL:
            ;
            break;
          default:
            jj_la1[79] = jj_gen;
            goto label_48; break;
          }
        }label_48: ;
        
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token add_narity_op_metric_f_exp() {
 /*@bgen(jjtree) ADD_NARITY_OP_METRIC_F_EXP */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTADD_NARITY_OP_METRIC_F_EXP);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(ADD);
        metric_f_exp();
        while (true) {
          metric_f_exp();
          switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
          case LPAREN:
          case NUMBER:
          case AT:
          case TOTAL_TIME:
          case SYMBOL:
            ;
            break;
          default:
            jj_la1[80] = jj_gen;
            goto label_49; break;
          }
        }label_49: ;
        
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token substract_narity_op_metric_f_exp() {
 /*@bgen(jjtree) SUBSTRACT_NARITY_OP_METRIC_F_EXP */
        SimpleNode jjtn000 = new SimpleNode(this, LexerTreeConstants.JJTSUBSTRACT_NARITY_OP_METRIC_F_EXP);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = token;
    try {
      try {
        t = jj_consume_token(LPAREN);
        jj_consume_token(SUB);
        while (true) {
          metric_f_exp();
          switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
          case LPAREN:
          case NUMBER:
          case AT:
          case TOTAL_TIME:
          case SYMBOL:
            ;
            break;
          default:
            jj_la1[81] = jj_gen;
            goto label_50; break;
          }
        }label_50: ;
        
        jj_consume_token(RPAREN);
      } catch (System.Exception e) {
                this.error(e, t.beginLine, t.beginColumn);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setColumn(t.beginColumn);
                {if (true) return t;}
    } catch (System.Exception jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 is ApplicationException) {
            {if (true) throw (ApplicationException)jjte000;}
          }
          if (jjte000 is ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Exception)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new System.Exception("Missing return statement in function");
  }

  private bool jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private bool jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private bool jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private bool jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private bool jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private bool jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private bool jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private bool jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private bool jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private bool jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private bool jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private bool jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private bool jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private bool jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private bool jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private bool jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private bool jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private bool jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private bool jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private bool jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private bool jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private bool jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private bool jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private bool jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private bool jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private bool jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private bool jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private bool jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private bool jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private bool jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private bool jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private bool jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private bool jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private bool jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private bool jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private bool jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private bool jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private bool jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private bool jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private bool jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private bool jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private bool jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private bool jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private bool jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private bool jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private bool jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private bool jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private bool jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  private bool jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  private bool jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  private bool jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  private bool jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  private bool jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  private bool jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  private bool jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  private bool jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  private bool jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  private bool jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  private bool jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  private bool jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  private bool jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  private bool jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  private bool jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  private bool jj_2_64(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  private bool jj_2_65(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

  private bool jj_2_66(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(65, xla); }
  }

  private bool jj_2_67(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(66, xla); }
  }

  private bool jj_2_68(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(67, xla); }
  }

  private bool jj_2_69(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(68, xla); }
  }

  private bool jj_2_70(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_70(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(69, xla); }
  }

  private bool jj_2_71(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_71(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(70, xla); }
  }

  private bool jj_2_72(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_72(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(71, xla); }
  }

  private bool jj_2_73(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_73(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(72, xla); }
  }

  private bool jj_2_74(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_74(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(73, xla); }
  }

  private bool jj_2_75(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_75(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(74, xla); }
  }

  private bool jj_2_76(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_76(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(75, xla); }
  }

  private bool jj_2_77(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_77(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(76, xla); }
  }

  private bool jj_2_78(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_78(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(77, xla); }
  }

  private bool jj_2_79(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_79(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(78, xla); }
  }

  private bool jj_2_80(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_80(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(79, xla); }
  }

  private bool jj_2_81(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_81(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(80, xla); }
  }

  private bool jj_2_82(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_82(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(81, xla); }
  }

  private bool jj_2_83(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_83(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(82, xla); }
  }

  private bool jj_2_84(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_84(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(83, xla); }
  }

  private bool jj_2_85(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_85(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(84, xla); }
  }

  private bool jj_2_86(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_86(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(85, xla); }
  }

  private bool jj_2_87(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_87(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(86, xla); }
  }

  private bool jj_2_88(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_88(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(87, xla); }
  }

  private bool jj_2_89(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_89(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(88, xla); }
  }

  private bool jj_2_90(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_90(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(89, xla); }
  }

  private bool jj_2_91(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_91(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(90, xla); }
  }

  private bool jj_2_92(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_92(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(91, xla); }
  }

  private bool jj_2_93(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_93(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(92, xla); }
  }

  private bool jj_2_94(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_94(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(93, xla); }
  }

  private bool jj_2_95(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_95(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(94, xla); }
  }

  private bool jj_2_96(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_96(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(95, xla); }
  }

  private bool jj_2_97(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_97(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(96, xla); }
  }

  private bool jj_2_98(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_98(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(97, xla); }
  }

  private bool jj_2_99(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_99(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(98, xla); }
  }

  private bool jj_2_100(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_100(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(99, xla); }
  }

  private bool jj_2_101(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_101(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(100, xla); }
  }

  private bool jj_2_102(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_102(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(101, xla); }
  }

  private bool jj_2_103(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_103(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(102, xla); }
  }

  private bool jj_2_104(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_104(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(103, xla); }
  }

  private bool jj_2_105(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_105(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(104, xla); }
  }

  private bool jj_2_106(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_106(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(105, xla); }
  }

  private bool jj_2_107(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_107(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(106, xla); }
  }

  private bool jj_2_108(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_108(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(107, xla); }
  }

  private bool jj_2_109(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_109(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(108, xla); }
  }

  private bool jj_2_110(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_110(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(109, xla); }
  }

  private bool jj_2_111(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_111(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(110, xla); }
  }

  private bool jj_2_112(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_112(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(111, xla); }
  }

  private bool jj_2_113(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_113(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(112, xla); }
  }

  private bool jj_2_114(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_114(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(113, xla); }
  }

  private bool jj_2_115(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_115(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(114, xla); }
  }

  private bool jj_2_116(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_116(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(115, xla); }
  }

  private bool jj_2_117(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_117(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(116, xla); }
  }

  private bool jj_2_118(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_118(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(117, xla); }
  }

  private bool jj_2_119(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_119(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(118, xla); }
  }

  private bool jj_2_120(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_120(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(119, xla); }
  }

  private bool jj_2_121(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_121(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(120, xla); }
  }

  private bool jj_2_122(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_122(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(121, xla); }
  }

  private bool jj_2_123(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_123(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(122, xla); }
  }

  private bool jj_2_124(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_124(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(123, xla); }
  }

  private bool jj_2_125(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_125(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(124, xla); }
  }

  private bool jj_2_126(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_126(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(125, xla); }
  }

  private bool jj_2_127(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_127(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(126, xla); }
  }

  private bool jj_2_128(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_128(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(127, xla); }
  }

  private bool jj_2_129(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_129(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(128, xla); }
  }

  private bool jj_2_130(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_130(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(129, xla); }
  }

  private bool jj_2_131(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_131(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(130, xla); }
  }

  private bool jj_2_132(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_132(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(131, xla); }
  }

  private bool jj_2_133(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_133(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(132, xla); }
  }

  private bool jj_2_134(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_134(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(133, xla); }
  }

  private bool jj_2_135(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_135(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(134, xla); }
  }

  private bool jj_2_136(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_136(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(135, xla); }
  }

  private bool jj_2_137(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_137(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(136, xla); }
  }

  private bool jj_2_138(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_138(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(137, xla); }
  }

  private bool jj_2_139(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_139(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(138, xla); }
  }

  private bool jj_2_140(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_140(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(139, xla); }
  }

  private bool jj_2_141(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_141(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(140, xla); }
  }

  private bool jj_2_142(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_142(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(141, xla); }
  }

  private bool jj_2_143(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_143(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(142, xla); }
  }

  private bool jj_2_144(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_144(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(143, xla); }
  }

  private bool jj_2_145(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_145(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(144, xla); }
  }

  private bool jj_2_146(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_146(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(145, xla); }
  }

  private bool jj_2_147(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_147(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(146, xla); }
  }

  private bool jj_2_148(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_148(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(147, xla); }
  }

  private bool jj_2_149(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_149(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(148, xla); }
  }

  private bool jj_2_150(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_150(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(149, xla); }
  }

  private bool jj_2_151(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_151(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(150, xla); }
  }

  private bool jj_2_152(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_152(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(151, xla); }
  }

  private bool jj_2_153(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_153(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(152, xla); }
  }

  private bool jj_2_154(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_154(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(153, xla); }
  }

  private bool jj_2_155(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_155(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(154, xla); }
  }

  private bool jj_2_156(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_156(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(155, xla); }
  }

  private bool jj_2_157(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_157(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(156, xla); }
  }

  private bool jj_2_158(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_158(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(157, xla); }
  }

  private bool jj_2_159(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_159(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(158, xla); }
  }

  private bool jj_2_160(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_160(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(159, xla); }
  }

  private bool jj_2_161(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_161(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(160, xla); }
  }

  private bool jj_2_162(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_162(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(161, xla); }
  }

  private bool jj_2_163(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_163(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(162, xla); }
  }

  private bool jj_2_164(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_164(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(163, xla); }
  }

  private bool jj_2_165(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_165(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(164, xla); }
  }

  private bool jj_2_166(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_166(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(165, xla); }
  }

  private bool jj_2_167(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_167(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(166, xla); }
  }

  private bool jj_2_168(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_168(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(167, xla); }
  }

  private bool jj_2_169(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_169(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(168, xla); }
  }

  private bool jj_2_170(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_170(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(169, xla); }
  }

  private bool jj_2_171(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_171(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(170, xla); }
  }

  private bool jj_2_172(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_172(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(171, xla); }
  }

  private bool jj_2_173(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_173(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(172, xla); }
  }

  private bool jj_2_174(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_174(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(173, xla); }
  }

  private bool jj_2_175(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_175(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(174, xla); }
  }

  private bool jj_2_176(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_176(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(175, xla); }
  }

  private bool jj_2_177(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_177(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(176, xla); }
  }

  private bool jj_2_178(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_178(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(177, xla); }
  }

  private bool jj_2_179(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_179(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(178, xla); }
  }

  private bool jj_2_180(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_180(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(179, xla); }
  }

  private bool jj_2_181(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_181(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(180, xla); }
  }

  private bool jj_2_182(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_182(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(181, xla); }
  }

  private bool jj_2_183(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_183(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(182, xla); }
  }

  private bool jj_2_184(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_184(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(183, xla); }
  }

  private bool jj_2_185(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_185(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(184, xla); }
  }

  private bool jj_2_186(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_186(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(185, xla); }
  }

  private bool jj_2_187(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_187(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(186, xla); }
  }

  private bool jj_3R_123() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(MAX)) return true;
    Token xsp;
    if (jj_3R_242()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_242()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private bool jj_3R_194() {
    if (jj_scan_token(CONTINOUS_VARIABLE)) return true;
    return false;
  }

  private bool jj_3R_160() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(INCREASE)) return true;
    return false;
  }

  private bool jj_3_156() {
    if (jj_3R_194()) return true;
    return false;
  }

  private bool jj_3_155() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(MUL)) return true;
    return false;
  }

  private bool jj_3_154() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(MUL)) return true;
    return false;
  }

  private bool jj_3R_86() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(OR)) return true;
    return false;
  }

  private bool jj_3R_122() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(MOD)) return true;
    Token xsp;
    if (jj_3R_241()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_241()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private bool jj_3R_216() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(SUB)) return true;
    return false;
  }

  private bool jj_3R_159() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(SCALE_DOWN)) return true;
    return false;
  }

  private bool jj_3R_85() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private bool jj_3R_121() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(DIV)) return true;
    if (jj_3R_108()) return true;
    return false;
  }

  private bool jj_3R_193() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(DECREASE)) return true;
    return false;
  }

  private bool jj_3R_215() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(ADD)) return true;
    return false;
  }

  private bool jj_3_45() {
    if (jj_3R_93()) return true;
    return false;
  }

  private bool jj_3R_57() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(FUNCTIONS)) return true;
    return false;
  }

  private bool jj_3R_240() {
    if (jj_3R_108()) return true;
    return false;
  }

  private bool jj_3_44() {
    if (jj_3R_92()) return true;
    return false;
  }

  private bool jj_3_43() {
    if (jj_3R_91()) return true;
    return false;
  }

  private bool jj_3_42() {
    if (jj_3R_67()) return true;
    return false;
  }

  private bool jj_3_41() {
    if (jj_3R_66()) return true;
    return false;
  }

  private bool jj_3_40() {
    if (jj_3R_90()) return true;
    return false;
  }

  private bool jj_3_39() {
    if (jj_3R_89()) return true;
    return false;
  }

  private bool jj_3R_158() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(SCALE_UP)) return true;
    return false;
  }

  private bool jj_3_38() {
    if (jj_3R_88()) return true;
    return false;
  }

  private bool jj_3_37() {
    if (jj_3R_87()) return true;
    return false;
  }

  private bool jj_3_36() {
    if (jj_3R_86()) return true;
    return false;
  }

  private bool jj_3_35() {
    if (jj_3R_85()) return true;
    return false;
  }

  private bool jj_3R_120() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(MUL)) return true;
    if (jj_3R_108()) return true;
    return false;
  }

  private bool jj_3R_107() {
    if (jj_scan_token(143)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(140)) {
    jj_scanpos = xsp;
    if (jj_scan_token(138)) {
    jj_scanpos = xsp;
    if (jj_scan_token(137)) return true;
    }
    }
    return false;
  }

  private bool jj_3R_192() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(INCREASE)) return true;
    return false;
  }

  private bool jj_3R_218() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(DIV)) return true;
    return false;
  }

  private bool jj_3R_239() {
    if (jj_3R_108()) return true;
    return false;
  }

  private bool jj_3_153() {
    if (jj_3R_193()) return true;
    return false;
  }

  private bool jj_3_152() {
    if (jj_3R_192()) return true;
    return false;
  }

  private bool jj_3R_219() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(140)) {
    jj_scanpos = xsp;
    if (jj_scan_token(117)) return true;
    }
    return false;
  }

  private bool jj_3R_119() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(SUB)) return true;
    Token xsp;
    if (jj_3R_240()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_240()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private bool jj_3R_157() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private bool jj_3R_217() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(MUL)) return true;
    return false;
  }

  private bool jj_3R_187() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_152()) {
    jj_scanpos = xsp;
    if (jj_3_153()) return true;
    }
    return false;
  }

  private bool jj_3_118() {
    if (jj_3R_161()) return true;
    return false;
  }

  private bool jj_3R_118() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(ADD)) return true;
    Token xsp;
    if (jj_3R_239()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_239()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private bool jj_3_117() {
    if (jj_3R_160()) return true;
    return false;
  }

  private bool jj_3_116() {
    if (jj_3R_159()) return true;
    return false;
  }

  private bool jj_3_115() {
    if (jj_3R_158()) return true;
    return false;
  }

  private bool jj_3_187() {
    if (jj_3R_218()) return true;
    return false;
  }

  private bool jj_3_114() {
    if (jj_3R_157()) return true;
    return false;
  }

  private bool jj_3_186() {
    if (jj_3R_217()) return true;
    return false;
  }

  private bool jj_3_185() {
    if (jj_3R_216()) return true;
    return false;
  }

  private bool jj_3R_191() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(AT)) return true;
    if (jj_scan_token(END)) return true;
    return false;
  }

  private bool jj_3_184() {
    if (jj_3R_215()) return true;
    return false;
  }

  private bool jj_3R_154() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_114()) {
    jj_scanpos = xsp;
    if (jj_3_115()) {
    jj_scanpos = xsp;
    if (jj_3_116()) {
    jj_scanpos = xsp;
    if (jj_3_117()) {
    jj_scanpos = xsp;
    if (jj_3_118()) return true;
    }
    }
    }
    }
    return false;
  }

  private bool jj_3R_211() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_184()) {
    jj_scanpos = xsp;
    if (jj_3_185()) {
    jj_scanpos = xsp;
    if (jj_3_186()) {
    jj_scanpos = xsp;
    if (jj_3_187()) return true;
    }
    }
    }
    return false;
  }

  private bool jj_3_86() {
    if (jj_3R_133()) return true;
    return false;
  }

  private bool jj_3_85() {
    if (jj_3R_132()) return true;
    return false;
  }

  private bool jj_3_84() {
    if (jj_3R_131()) return true;
    return false;
  }

  private bool jj_3_83() {
    if (jj_3R_130()) return true;
    return false;
  }

  private bool jj_3_82() {
    if (jj_3R_129()) return true;
    return false;
  }

  private bool jj_3_81() {
    if (jj_3R_128()) return true;
    return false;
  }

  private bool jj_3_80() {
    if (jj_3R_127()) return true;
    return false;
  }

  private bool jj_3R_230() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(TOTAL_TIME)) return true;
    return false;
  }

  private bool jj_3_79() {
    if (jj_3R_126()) return true;
    return false;
  }

  private bool jj_3_78() {
    if (jj_3R_125()) return true;
    return false;
  }

  private bool jj_3_77() {
    if (jj_3R_124()) return true;
    return false;
  }

  private bool jj_3_76() {
    if (jj_3R_123()) return true;
    return false;
  }

  private bool jj_3_75() {
    if (jj_3R_122()) return true;
    return false;
  }

  private bool jj_3_74() {
    if (jj_3R_121()) return true;
    return false;
  }

  private bool jj_3_73() {
    if (jj_3R_120()) return true;
    return false;
  }

  private bool jj_3R_190() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(AT)) return true;
    if (jj_scan_token(START)) return true;
    return false;
  }

  private bool jj_3_72() {
    if (jj_3R_119()) return true;
    return false;
  }

  private bool jj_3_71() {
    if (jj_3R_118()) return true;
    return false;
  }

  private bool jj_3R_213() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(122)) {
    jj_scanpos = xsp;
    if (jj_3R_230()) return true;
    }
    return false;
  }

  private bool jj_3_151() {
    if (jj_3R_191()) return true;
    return false;
  }

  private bool jj_3_150() {
    if (jj_3R_190()) return true;
    return false;
  }

  private bool jj_3R_116() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_71()) {
    jj_scanpos = xsp;
    if (jj_3_72()) {
    jj_scanpos = xsp;
    if (jj_3_73()) {
    jj_scanpos = xsp;
    if (jj_3_74()) {
    jj_scanpos = xsp;
    if (jj_3_75()) {
    jj_scanpos = xsp;
    if (jj_3_76()) {
    jj_scanpos = xsp;
    if (jj_3_77()) {
    jj_scanpos = xsp;
    if (jj_3_78()) {
    jj_scanpos = xsp;
    if (jj_3_79()) {
    jj_scanpos = xsp;
    if (jj_3_80()) {
    jj_scanpos = xsp;
    if (jj_3_81()) {
    jj_scanpos = xsp;
    if (jj_3_82()) {
    jj_scanpos = xsp;
    if (jj_3_83()) {
    jj_scanpos = xsp;
    if (jj_3_84()) {
    jj_scanpos = xsp;
    if (jj_3_85()) {
    jj_scanpos = xsp;
    if (jj_3_86()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private bool jj_3R_235() {
    if (jj_3R_233()) return true;
    return false;
  }

  private bool jj_3R_234() {
    if (jj_3R_238()) return true;
    return false;
  }

  private bool jj_3_113() {
    if (jj_3R_108()) return true;
    return false;
  }

  private bool jj_3R_56() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(PREDICATES)) return true;
    return false;
  }

  private bool jj_3_112() {
    if (jj_3R_109()) return true;
    return false;
  }

  private bool jj_3R_186() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_150()) {
    jj_scanpos = xsp;
    if (jj_3_151()) return true;
    }
    return false;
  }

  private bool jj_3_111() {
    if (jj_3R_156()) return true;
    return false;
  }

  private bool jj_3R_229() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_234()) {
    jj_scanpos = xsp;
    if (jj_3R_235()) return true;
    }
    return false;
  }

  private bool jj_3R_171() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private bool jj_3_110() {
    if (jj_3R_155()) return true;
    return false;
  }

  private bool jj_3R_189() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(AT)) return true;
    if (jj_scan_token(END)) return true;
    if (jj_3R_154()) return true;
    return false;
  }

  private bool jj_3_70() {
    if (jj_3R_117()) return true;
    return false;
  }

  private bool jj_3_109() {
    if (jj_3R_154()) return true;
    return false;
  }

  private bool jj_3_69() {
    if (jj_3R_116()) return true;
    return false;
  }

  private bool jj_3_108() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private bool jj_3R_238() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_233()) return true;
    return false;
  }

  private bool jj_3R_222() {
    if (jj_3R_107()) return true;
    return false;
  }

  private bool jj_3R_221() {
    if (jj_3R_171()) return true;
    return false;
  }

  private bool jj_3R_152() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_108()) {
    jj_scanpos = xsp;
    if (jj_3_109()) {
    jj_scanpos = xsp;
    if (jj_3_110()) return true;
    }
    }
    return false;
  }

  private bool jj_3R_55() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(CONSTANTS)) return true;
    return false;
  }

  private bool jj_3R_108() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_221()) {
    jj_scanpos = xsp;
    if (jj_3R_222()) {
    jj_scanpos = xsp;
    if (jj_3_69()) {
    jj_scanpos = xsp;
    if (jj_3_70()) return true;
    }
    }
    }
    return false;
  }

  private bool jj_3R_188() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(AT)) return true;
    if (jj_scan_token(START)) return true;
    if (jj_3R_154()) return true;
    return false;
  }

  private bool jj_3R_212() {
    if (jj_3R_229()) return true;
    return false;
  }

  private bool jj_3R_153() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private bool jj_3_149() {
    if (jj_3R_189()) return true;
    return false;
  }

  private bool jj_3_148() {
    if (jj_3R_188()) return true;
    return false;
  }

  private bool jj_3R_115() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  private bool jj_3_107() {
    if (jj_3R_152()) return true;
    return false;
  }

  private bool jj_3_106() {
    if (jj_3R_153()) return true;
    return false;
  }

  private bool jj_3R_185() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_148()) {
    jj_scanpos = xsp;
    if (jj_3_149()) return true;
    }
    return false;
  }

  private bool jj_3R_214() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(IS_VIOLATED)) return true;
    return false;
  }

  private bool jj_3_147() {
    if (jj_3R_187()) return true;
    return false;
  }

  private bool jj_3_146() {
    if (jj_3R_186()) return true;
    return false;
  }

  private bool jj_3_145() {
    if (jj_3R_185()) return true;
    return false;
  }

  private bool jj_3_183() {
    if (jj_3R_214()) return true;
    return false;
  }

  private bool jj_3_182() {
    if (jj_3R_213()) return true;
    return false;
  }

  private bool jj_3R_112() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(LESS)) return true;
    return false;
  }

  private bool jj_3_181() {
    if (jj_3R_212()) return true;
    return false;
  }

  private bool jj_3_180() {
    if (jj_3R_171()) return true;
    return false;
  }

  private bool jj_3R_181() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_145()) {
    jj_scanpos = xsp;
    if (jj_3_146()) {
    jj_scanpos = xsp;
    if (jj_3_147()) return true;
    }
    }
    return false;
  }

  private bool jj_3_179() {
    if (jj_3R_211()) return true;
    return false;
  }

  private bool jj_3R_151() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(WHEN)) return true;
    return false;
  }

  private bool jj_3R_114() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(LEQUAL)) return true;
    return false;
  }

  private bool jj_3R_182() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private bool jj_3R_150() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(FORALL)) return true;
    return false;
  }

  private bool jj_3R_210() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(METRIC)) return true;
    if (jj_scan_token(MINIMIZE)) return true;
    return false;
  }

  private bool jj_3R_113() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(GEQUAL)) return true;
    return false;
  }

  private bool jj_3_105() {
    if (jj_3R_152()) return true;
    return false;
  }

  private bool jj_3_104() {
    if (jj_3R_151()) return true;
    return false;
  }

  private bool jj_3_103() {
    if (jj_3R_150()) return true;
    return false;
  }

  private bool jj_3R_54() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(TYPES)) return true;
    return false;
  }

  private bool jj_3R_183() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(FORALL)) return true;
    return false;
  }

  private bool jj_3R_209() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(METRIC)) return true;
    if (jj_scan_token(MAXIMIZE)) return true;
    return false;
  }

  private bool jj_3R_149() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_103()) {
    jj_scanpos = xsp;
    if (jj_3_104()) {
    jj_scanpos = xsp;
    if (jj_3_105()) return true;
    }
    }
    return false;
  }

  private bool jj_3R_84() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(HOLD_AFTER)) return true;
    return false;
  }

  private bool jj_3R_111() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(GREATER)) return true;
    return false;
  }

  private bool jj_3_178() {
    if (jj_3R_210()) return true;
    return false;
  }

  private bool jj_3_177() {
    if (jj_3R_209()) return true;
    return false;
  }

  private bool jj_3R_184() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(WHEN)) return true;
    return false;
  }

  private bool jj_3_68() {
    if (jj_3R_115()) return true;
    return false;
  }

  private bool jj_3_67() {
    if (jj_3R_114()) return true;
    return false;
  }

  private bool jj_3_66() {
    if (jj_3R_113()) return true;
    return false;
  }

  private bool jj_3_65() {
    if (jj_3R_112()) return true;
    return false;
  }

  private bool jj_3R_203() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_177()) {
    jj_scanpos = xsp;
    if (jj_3_178()) return true;
    }
    return false;
  }

  private bool jj_3_64() {
    if (jj_3R_111()) return true;
    return false;
  }

  private bool jj_3R_148() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private bool jj_3R_83() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(HOLD_DURING)) return true;
    return false;
  }

  private bool jj_3_144() {
    if (jj_3R_154()) return true;
    return false;
  }

  private bool jj_3_143() {
    if (jj_3R_184()) return true;
    return false;
  }

  private bool jj_3_142() {
    if (jj_3R_183()) return true;
    return false;
  }

  private bool jj_3_141() {
    if (jj_3R_182()) return true;
    return false;
  }

  private bool jj_3_102() {
    if (jj_3R_149()) return true;
    return false;
  }

  private bool jj_3_140() {
    if (jj_3R_181()) return true;
    return false;
  }

  private bool jj_3R_220() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_64()) {
    jj_scanpos = xsp;
    if (jj_3_65()) {
    jj_scanpos = xsp;
    if (jj_3_66()) {
    jj_scanpos = xsp;
    if (jj_3_67()) {
    jj_scanpos = xsp;
    if (jj_3_68()) return true;
    }
    }
    }
    }
    return false;
  }

  private bool jj_3_101() {
    if (jj_3R_148()) return true;
    return false;
  }

  private bool jj_3R_207() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(FORALL)) return true;
    return false;
  }

  private bool jj_3R_82() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(ALWAYS_WITHIN)) return true;
    return false;
  }

  private bool jj_3R_104() {
    if (jj_3R_220()) return true;
    return false;
  }

  private bool jj_3R_53() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(REQUIREMENTS)) return true;
    return false;
  }

  private bool jj_3R_208() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(PREFERENCE)) return true;
    return false;
  }

  private bool jj_3R_81() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(SOMETIME_BEFORE)) return true;
    return false;
  }

  private bool jj_3R_110() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private bool jj_3_9() {
    if (jj_3R_59()) return true;
    return false;
  }

  private bool jj_3R_206() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private bool jj_3R_180() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(AT)) return true;
    return false;
  }

  private bool jj_3_62() {
    if (jj_3R_94()) return true;
    return false;
  }

  private bool jj_3R_80() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(SOMETIME_AFTER)) return true;
    return false;
  }

  private bool jj_3_8() {
    if (jj_3R_58()) return true;
    return false;
  }

  private bool jj_3R_147() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(PREFERENCE)) return true;
    return false;
  }

  private bool jj_3_63() {
    if (jj_3R_110()) return true;
    return false;
  }

  private bool jj_3_176() {
    if (jj_3R_92()) return true;
    return false;
  }

  private bool jj_3_7() {
    if (jj_3R_57()) return true;
    return false;
  }

  private bool jj_3_175() {
    if (jj_3R_208()) return true;
    return false;
  }

  private bool jj_3R_155() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_62()) {
    jj_scanpos = xsp;
    if (jj_3_63()) return true;
    }
    return false;
  }

  private bool jj_3_174() {
    if (jj_3R_207()) return true;
    return false;
  }

  private bool jj_3_173() {
    if (jj_3R_206()) return true;
    return false;
  }

  private bool jj_3R_225() {
    if (jj_3R_93()) return true;
    return false;
  }

  private bool jj_3_100() {
    if (jj_3R_147()) return true;
    return false;
  }

  private bool jj_3_6() {
    if (jj_3R_56()) return true;
    return false;
  }

  private bool jj_3R_179() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(AT)) return true;
    if (jj_scan_token(START)) return true;
    return false;
  }

  private bool jj_3_5() {
    if (jj_3R_55()) return true;
    return false;
  }

  private bool jj_3R_79() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(AT_MOST_ONCE)) return true;
    return false;
  }

  private bool jj_3R_146() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_100()) {
    jj_scanpos = xsp;
    if (jj_3R_225()) return true;
    }
    return false;
  }

  private bool jj_3_4() {
    if (jj_3R_54()) return true;
    return false;
  }

  private bool jj_3_139() {
    if (jj_3R_180()) return true;
    return false;
  }

  private bool jj_3_138() {
    if (jj_3R_179()) return true;
    return false;
  }

  private bool jj_3R_231() {
    if (jj_3R_156()) return true;
    return false;
  }

  private bool jj_3_3() {
    if (jj_3R_53()) return true;
    return false;
  }

  private bool jj_3R_177() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_138()) {
    jj_scanpos = xsp;
    if (jj_3_139()) return true;
    }
    return false;
  }

  private bool jj_3R_78() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(WITHIN)) return true;
    return false;
  }

  private bool jj_3R_58() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(CONSTRAINTS)) return true;
    return false;
  }

  private bool jj_3R_145() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(FORALL)) return true;
    return false;
  }

  private bool jj_3R_51() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(DEFINE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(DOMAIN)) return true;
    return false;
  }

  private bool jj_3R_228() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(OVER)) return true;
    return false;
  }

  private bool jj_3R_224() {
    if (jj_3R_107()) return true;
    return false;
  }

  private bool jj_3R_223() {
    if (jj_3R_231()) return true;
    return false;
  }

  private bool jj_3_1() {
    if (jj_3R_51()) return true;
    return false;
  }

  private bool jj_3R_77() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(105)) {
    jj_scanpos = xsp;
    if (jj_scan_token(106)) return true;
    }
    return false;
  }

  private bool jj_3R_144() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private bool jj_3_2() {
    if (jj_3R_52()) return true;
    return false;
  }

  private bool jj_3R_109() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_223()) {
    jj_scanpos = xsp;
    if (jj_3R_224()) return true;
    }
    return false;
  }

  private bool jj_3R_178() {
    if (jj_3R_228()) return true;
    return false;
  }

  private bool jj_3R_204() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(AT)) return true;
    if (jj_3R_171()) return true;
    return false;
  }

  private bool jj_3R_76() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(NEXT)) return true;
    return false;
  }

  private bool jj_3R_143() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private bool jj_3_137() {
    if (jj_3R_178()) return true;
    return false;
  }

  private bool jj_3_136() {
    if (jj_3R_177()) return true;
    return false;
  }

  private bool jj_3_99() {
    if (jj_3R_146()) return true;
    return false;
  }

  private bool jj_3_98() {
    if (jj_3R_145()) return true;
    return false;
  }

  private bool jj_3_97() {
    if (jj_3R_144()) return true;
    return false;
  }

  private bool jj_3_96() {
    if (jj_3R_143()) return true;
    return false;
  }

  private bool jj_3R_175() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_136()) {
    jj_scanpos = xsp;
    if (jj_3_137()) return true;
    }
    return false;
  }

  private bool jj_3R_94() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_219()) return true;
    return false;
  }

  private bool jj_3R_75() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(WEAK_UNTIL)) return true;
    return false;
  }

  private bool jj_3R_176() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(PREFERENCE)) return true;
    return false;
  }

  private bool jj_3R_103() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(FORALL)) return true;
    return false;
  }

  private bool jj_3R_74() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(UNTIL)) return true;
    return false;
  }

  private bool jj_3R_205() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  private bool jj_3_135() {
    if (jj_3R_176()) return true;
    return false;
  }

  private bool jj_3_134() {
    if (jj_3R_175()) return true;
    return false;
  }

  private bool jj_3_172() {
    if (jj_3R_205()) return true;
    return false;
  }

  private bool jj_3_171() {
    if (jj_3R_155()) return true;
    return false;
  }

  private bool jj_3_170() {
    if (jj_3R_204()) return true;
    return false;
  }

  private bool jj_3R_102() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(EXISTS_UNIQUE)) return true;
    return false;
  }

  private bool jj_3R_172() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_134()) {
    jj_scanpos = xsp;
    if (jj_3_135()) return true;
    }
    return false;
  }

  private bool jj_3R_73() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(ALWAYS)) return true;
    return false;
  }

  private bool jj_3R_101() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(EXISTS)) return true;
    return false;
  }

  private bool jj_3R_72() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(T_UNTIL)) return true;
    return false;
  }

  private bool jj_3R_173() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private bool jj_3R_134() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(ACTION)) return true;
    return false;
  }

  private bool jj_3R_100() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(IF_THEN_ELSE)) return true;
    return false;
  }

  private bool jj_3R_71() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(T_EVENTUALLY)) return true;
    return false;
  }

  private bool jj_3R_174() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(FORALL)) return true;
    return false;
  }

  private bool jj_3R_202() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(OBJECTS)) return true;
    return false;
  }

  private bool jj_3_95() {
    if (jj_3R_142()) return true;
    return false;
  }

  private bool jj_3_94() {
    if (jj_3R_141()) return true;
    return false;
  }

  private bool jj_3_133() {
    if (jj_3R_174()) return true;
    return false;
  }

  private bool jj_3_93() {
    if (jj_3R_140()) return true;
    return false;
  }

  private bool jj_3_132() {
    if (jj_3R_173()) return true;
    return false;
  }

  private bool jj_3_131() {
    if (jj_3R_172()) return true;
    return false;
  }

  private bool jj_3R_136() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_93()) {
    jj_scanpos = xsp;
    if (jj_3_94()) {
    jj_scanpos = xsp;
    if (jj_3_95()) return true;
    }
    }
    return false;
  }

  private bool jj_3R_99() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(IMPLY)) return true;
    return false;
  }

  private bool jj_3R_70() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(T_ALWAYS)) return true;
    return false;
  }

  private bool jj_3_92() {
    if (jj_3R_139()) return true;
    return false;
  }

  private bool jj_3_91() {
    if (jj_3R_138()) return true;
    return false;
  }

  private bool jj_3_130() {
    if (jj_3R_108()) return true;
    return false;
  }

  private bool jj_3_90() {
    if (jj_3R_137()) return true;
    return false;
  }

  private bool jj_3_129() {
    if (jj_3R_171()) return true;
    return false;
  }

  private bool jj_3R_98() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private bool jj_3R_69() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(AT)) return true;
    return false;
  }

  private bool jj_3_88() {
    if (jj_3R_135()) return true;
    return false;
  }

  private bool jj_3_89() {
    if (jj_3R_136()) return true;
    return false;
  }

  private bool jj_3R_97() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(XOR_UNIQUE)) return true;
    return false;
  }

  private bool jj_3R_68() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(FORALL)) return true;
    return false;
  }

  private bool jj_3_169() {
    if (jj_3R_203()) return true;
    return false;
  }

  private bool jj_3_168() {
    if (jj_3R_58()) return true;
    return false;
  }

  private bool jj_3_87() {
    if (jj_3R_134()) return true;
    return false;
  }

  private bool jj_3R_196() {
    if (jj_scan_token(VAR_DURATION)) return true;
    return false;
  }

  private bool jj_3_167() {
    if (jj_3R_202()) return true;
    return false;
  }

  private bool jj_3_166() {
    if (jj_3R_53()) return true;
    return false;
  }

  private bool jj_3_165() {
    if (jj_3R_201()) return true;
    return false;
  }

  private bool jj_3R_52() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(DEFINE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(PROBLEM)) return true;
    return false;
  }

  private bool jj_3R_96() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(OR)) return true;
    return false;
  }

  private bool jj_3R_59() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(DECLARE_DEFINED_SYMBOLS)) return true;
    return false;
  }

  private bool jj_3R_245() {
    if (jj_3R_109()) return true;
    return false;
  }

  private bool jj_3R_170() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(LEQUAL)) return true;
    return false;
  }

  private bool jj_3R_227() {
    if (jj_3R_233()) return true;
    return false;
  }

  private bool jj_3R_226() {
    if (jj_3R_232()) return true;
    return false;
  }

  private bool jj_3R_201() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(LOCAL_VARS)) return true;
    return false;
  }

  private bool jj_3_164() {
    if (jj_3R_201()) return true;
    return false;
  }

  private bool jj_3R_95() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private bool jj_3R_156() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_226()) {
    jj_scanpos = xsp;
    if (jj_3R_227()) return true;
    }
    return false;
  }

  private bool jj_3R_169() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(GEQUAL)) return true;
    return false;
  }

  private bool jj_3R_139() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(DEFINED_FUNCTION)) return true;
    return false;
  }

  private bool jj_3R_65() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(IF_THEN_ELSE)) return true;
    return false;
  }

  private bool jj_3R_232() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_233()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_245()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private bool jj_3_61() {
    if (jj_3R_109()) return true;
    return false;
  }

  private bool jj_3_60() {
    if (jj_3R_108()) return true;
    return false;
  }

  private bool jj_3R_168() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  private bool jj_3_59() {
    if (jj_3R_107()) return true;
    return false;
  }

  private bool jj_3_128() {
    if (jj_3R_170()) return true;
    return false;
  }

  private bool jj_3_127() {
    if (jj_3R_169()) return true;
    return false;
  }

  private bool jj_3R_142() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(DEFINED_FUNCTION)) return true;
    return false;
  }

  private bool jj_3_126() {
    if (jj_3R_168()) return true;
    return false;
  }

  private bool jj_3R_64() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(IMPLY)) return true;
    return false;
  }

  private bool jj_3R_117() {
    if (jj_3R_156()) return true;
    return false;
  }

  private bool jj_3R_164() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_126()) {
    jj_scanpos = xsp;
    if (jj_3_127()) {
    jj_scanpos = xsp;
    if (jj_3_128()) return true;
    }
    }
    return false;
  }

  private bool jj_3R_138() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(DEFINED_PREDICATE)) return true;
    return false;
  }

  private bool jj_3R_63() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private bool jj_3R_133() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(CEIL)) return true;
    if (jj_3R_108()) return true;
    return false;
  }

  private bool jj_3R_167() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(AT)) return true;
    if (jj_scan_token(END)) return true;
    return false;
  }

  private bool jj_3R_106() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(ASSIGN_LOCAL_VAR)) return true;
    return false;
  }

  private bool jj_3R_141() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(DEFINED_PREDICATE)) return true;
    return false;
  }

  private bool jj_3R_62() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(XOR_UNIQUE)) return true;
    return false;
  }

  private bool jj_3R_132() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(FLOOR)) return true;
    if (jj_3R_108()) return true;
    return false;
  }

  private bool jj_3R_105() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(GOAL_MODALITY)) return true;
    return false;
  }

  private bool jj_3R_166() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(AT)) return true;
    if (jj_scan_token(START)) return true;
    return false;
  }

  private bool jj_3_58() {
    if (jj_3R_106()) return true;
    return false;
  }

  private bool jj_3_57() {
    if (jj_3R_105()) return true;
    return false;
  }

  private bool jj_3_56() {
    if (jj_3R_104()) return true;
    return false;
  }

  private bool jj_3R_137() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(DERIVED)) return true;
    return false;
  }

  private bool jj_3_55() {
    if (jj_3R_103()) return true;
    return false;
  }

  private bool jj_3_125() {
    if (jj_3R_167()) return true;
    return false;
  }

  private bool jj_3_54() {
    if (jj_3R_102()) return true;
    return false;
  }

  private bool jj_3_124() {
    if (jj_3R_166()) return true;
    return false;
  }

  private bool jj_3_53() {
    if (jj_3R_101()) return true;
    return false;
  }

  private bool jj_3R_61() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(OR)) return true;
    return false;
  }

  private bool jj_3_52() {
    if (jj_3R_100()) return true;
    return false;
  }

  private bool jj_3_51() {
    if (jj_3R_99()) return true;
    return false;
  }

  private bool jj_3R_131() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(INT)) return true;
    if (jj_3R_108()) return true;
    return false;
  }

  private bool jj_3_50() {
    if (jj_3R_98()) return true;
    return false;
  }

  private bool jj_3_49() {
    if (jj_3R_97()) return true;
    return false;
  }

  private bool jj_3_48() {
    if (jj_3R_96()) return true;
    return false;
  }

  private bool jj_3_47() {
    if (jj_3R_95()) return true;
    return false;
  }

  private bool jj_3_46() {
    if (jj_3R_94()) return true;
    return false;
  }

  private bool jj_3R_165() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_124()) {
    jj_scanpos = xsp;
    if (jj_3_125()) return true;
    }
    return false;
  }

  private bool jj_3R_140() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(DERIVED)) return true;
    return false;
  }

  private bool jj_3R_93() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_46()) {
    jj_scanpos = xsp;
    if (jj_3_47()) {
    jj_scanpos = xsp;
    if (jj_3_48()) {
    jj_scanpos = xsp;
    if (jj_3_49()) {
    jj_scanpos = xsp;
    if (jj_3_50()) {
    jj_scanpos = xsp;
    if (jj_3_51()) {
    jj_scanpos = xsp;
    if (jj_3_52()) {
    jj_scanpos = xsp;
    if (jj_3_53()) {
    jj_scanpos = xsp;
    if (jj_3_54()) {
    jj_scanpos = xsp;
    if (jj_3_55()) {
    jj_scanpos = xsp;
    if (jj_3_56()) {
    jj_scanpos = xsp;
    if (jj_3_57()) {
    jj_scanpos = xsp;
    if (jj_3_58()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private bool jj_3_123() {
    if (jj_3R_165()) return true;
    return false;
  }

  private bool jj_3_122() {
    if (jj_3R_164()) return true;
    return false;
  }

  private bool jj_3R_60() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private bool jj_3R_130() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(ROUND)) return true;
    if (jj_3R_108()) return true;
    return false;
  }

  private bool jj_3R_163() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_122()) {
    jj_scanpos = xsp;
    if (jj_3_123()) return true;
    }
    return false;
  }

  private bool jj_3_34() {
    if (jj_3R_84()) return true;
    return false;
  }

  private bool jj_3_33() {
    if (jj_3R_83()) return true;
    return false;
  }

  private bool jj_3_32() {
    if (jj_3R_82()) return true;
    return false;
  }

  private bool jj_3_31() {
    if (jj_3R_81()) return true;
    return false;
  }

  private bool jj_3_30() {
    if (jj_3R_80()) return true;
    return false;
  }

  private bool jj_3R_200() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(DIV)) return true;
    if (jj_3R_236()) return true;
    return false;
  }

  private bool jj_3_29() {
    if (jj_3R_79()) return true;
    return false;
  }

  private bool jj_3_28() {
    if (jj_3R_78()) return true;
    return false;
  }

  private bool jj_3_27() {
    if (jj_3R_77()) return true;
    return false;
  }

  private bool jj_3R_91() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(FORALL)) return true;
    return false;
  }

  private bool jj_3_26() {
    if (jj_3R_76()) return true;
    return false;
  }

  private bool jj_3_25() {
    if (jj_3R_75()) return true;
    return false;
  }

  private bool jj_3_24() {
    if (jj_3R_74()) return true;
    return false;
  }

  private bool jj_3R_129() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(EXP)) return true;
    if (jj_3R_108()) return true;
    return false;
  }

  private bool jj_3_23() {
    if (jj_3R_73()) return true;
    return false;
  }

  private bool jj_3R_237() {
    if (jj_3R_236()) return true;
    return false;
  }

  private bool jj_3_22() {
    if (jj_3R_72()) return true;
    return false;
  }

  private bool jj_3_21() {
    if (jj_3R_71()) return true;
    return false;
  }

  private bool jj_3_20() {
    if (jj_3R_70()) return true;
    return false;
  }

  private bool jj_3_19() {
    if (jj_3R_69()) return true;
    return false;
  }

  private bool jj_3_18() {
    if (jj_3R_68()) return true;
    return false;
  }

  private bool jj_3R_244() {
    if (jj_3R_108()) return true;
    return false;
  }

  private bool jj_3R_162() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private bool jj_3_17() {
    if (jj_3R_67()) return true;
    return false;
  }

  private bool jj_3_16() {
    if (jj_3R_66()) return true;
    return false;
  }

  private bool jj_3_15() {
    if (jj_3R_65()) return true;
    return false;
  }

  private bool jj_3_14() {
    if (jj_3R_64()) return true;
    return false;
  }

  private bool jj_3_13() {
    if (jj_3R_63()) return true;
    return false;
  }

  private bool jj_3R_199() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(MUL)) return true;
    if (jj_3R_236()) return true;
    return false;
  }

  private bool jj_3_12() {
    if (jj_3R_62()) return true;
    return false;
  }

  private bool jj_3_11() {
    if (jj_3R_61()) return true;
    return false;
  }

  private bool jj_3_10() {
    if (jj_3R_60()) return true;
    return false;
  }

  private bool jj_3R_67() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(EXISTS_UNIQUE)) return true;
    return false;
  }

  private bool jj_3_121() {
    if (jj_3R_163()) return true;
    return false;
  }

  private bool jj_3_120() {
    if (jj_3R_162()) return true;
    return false;
  }

  private bool jj_3R_128() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(LOG)) return true;
    if (jj_3R_108()) return true;
    return false;
  }

  private bool jj_3_119() {
    if (jj_3R_143()) return true;
    return false;
  }

  private bool jj_3R_92() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3_34()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private bool jj_3R_198() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(SUB)) return true;
    Token xsp;
    if (jj_3R_237()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_237()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private bool jj_3R_66() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(EXISTS)) return true;
    return false;
  }

  private bool jj_3R_127() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(ABS)) return true;
    Token xsp;
    if (jj_3R_244()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_244()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private bool jj_3R_197() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(ADD)) return true;
    if (jj_3R_236()) return true;
    return false;
  }

  private bool jj_3R_90() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(IF_THEN_ELSE)) return true;
    return false;
  }

  private bool jj_3R_126() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(SQRT)) return true;
    if (jj_3R_108()) return true;
    return false;
  }

  private bool jj_3_163() {
    if (jj_3R_200()) return true;
    return false;
  }

  private bool jj_3_162() {
    if (jj_3R_199()) return true;
    return false;
  }

  private bool jj_3_161() {
    if (jj_3R_198()) return true;
    return false;
  }

  private bool jj_3_160() {
    if (jj_3R_197()) return true;
    return false;
  }

  private bool jj_3R_243() {
    if (jj_3R_108()) return true;
    return false;
  }

  private bool jj_3R_89() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(IMPLY)) return true;
    return false;
  }

  private bool jj_3R_195() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_160()) {
    jj_scanpos = xsp;
    if (jj_3_161()) {
    jj_scanpos = xsp;
    if (jj_3_162()) {
    jj_scanpos = xsp;
    if (jj_3_163()) return true;
    }
    }
    }
    return false;
  }

  private bool jj_3R_135() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(DURATIVE_ACTION)) return true;
    return false;
  }

  private bool jj_3R_125() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(EXPT)) return true;
    if (jj_3R_108()) return true;
    return false;
  }

  private bool jj_3_159() {
    if (jj_3R_196()) return true;
    return false;
  }

  private bool jj_3R_242() {
    if (jj_3R_108()) return true;
    return false;
  }

  private bool jj_3_158() {
    if (jj_3R_195()) return true;
    return false;
  }

  private bool jj_3_157() {
    if (jj_3R_108()) return true;
    return false;
  }

  private bool jj_3R_88() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private bool jj_3R_236() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_157()) {
    jj_scanpos = xsp;
    if (jj_3_158()) {
    jj_scanpos = xsp;
    if (jj_3_159()) return true;
    }
    }
    return false;
  }

  private bool jj_3R_124() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(MIN)) return true;
    Token xsp;
    if (jj_3R_243()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_243()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private bool jj_3R_161() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(DECREASE)) return true;
    return false;
  }

  private bool jj_3R_241() {
    if (jj_3R_108()) return true;
    return false;
  }

  private bool jj_3R_233() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(140)) {
    jj_scanpos = xsp;
    if (jj_scan_token(117)) return true;
    }
    return false;
  }

  private bool jj_3R_87() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(XOR_UNIQUE)) return true;
    return false;
  }

  public LexerTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private long jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private long jj_la;
  public bool lookingAhead = false;
  private bool jj_semLA;
  private long jj_gen;
  private long[] jj_la1 = new long[82];
  static private long[] jj_la1_0;
  static private long[] jj_la1_1;
  static private long[] jj_la1_2;
  static private long[] jj_la1_3;
  static private long[] jj_la1_4;
  static Lexer(){
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new long[] {0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x0,0x2000,0x800000,0x0,0x0,0x800000,0x0,0x2000,0x0,0x0,0x0,0x2000,0x2000,0x2000,0x2000,0x0,0x2000,0x0,0x4000,0x0,0x2000,0x2000,0x2000,0x0,0x2000,0x2000,0x2000,0x0,0x2000,0x2000,0x0,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x4000000,0x2000,0x2000,0x0,0x2000,0x2000,0x2000,0x4000000,0x2000,0x2000,0x0,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x0,0x2000,0x0,0x0,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new long[] {0x0,0xffffc000,0xffffc000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new long[] {0x0,0x7,0x7,0x0,0x1000,0x0,0x1000,0x0,0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000,0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0x100,0x0,0x100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100,0x100,0x100,0x100,0x100,0x100,0x100,0x100,0x100,0x100,0x100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100,0x0,0x0,0x0,0x0,0x0,0x100,0x100,0x100,0x100,0x0,0x100,0x0,0x0,0x0,0x0,0x0,0x100,0x100,0x100,0x100,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new long[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200000,0x0,0x0,0x200000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x600,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200000,0x0,0x0,0x0,0x0,0x200000,0x200000,0x0,0x200000,0x200000,0x200000,0x200000,0x200000,0x200000,0x200000,0x200000,0x200000,0x200000,0x200000,0x200000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200000,0x0,0x0,0x0,0x0,0x0,0x200000,0x200000,0x200000,0x200000,0x0,0x0,0x0,0x0,0x0,0x200000,0x4000000,0x4200000,0x4200000,0x4200000,0x4200000,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new long[] {0x0,0x0,0x0,0x1400,0x0,0x1000,0x0,0x8000,0x0,0x1400,0x1400,0x1400,0x0,0x0,0x1000,0x1600,0x0,0x1000,0x0,0x8000,0x0,0x0,0x1600,0x0,0x0,0x0,0x0,0x20,0x10,0x40,0x8,0x0,0x0,0x0,0x9000,0x0,0x0,0x0,0x1000,0x9000,0x9000,0x8000,0x9000,0x9000,0x9000,0x9000,0x9000,0x9000,0x9000,0x9000,0x9000,0x9000,0x9000,0x1000,0x0,0x0,0x0,0x0,0x1000,0x0,0x0,0x9800,0x0,0x0,0x0,0x1000,0x0,0x9002,0x9002,0x9002,0x9002,0x0,0x1000,0x0,0x1000,0x1000,0x1000,0x0,0x1000,0x1000,0x1000,0x1000,};
   }
  private JJCalls[] jj_2_rtns = new JJCalls[187];
  private bool jj_rescan = false;
  private long jj_gc = 0;

  public Lexer(System.IO.Stream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new LexerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 82; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.Length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(System.IO.Stream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 82; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.Length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public Lexer(System.IO.TextReader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new LexerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 82; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.Length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(System.IO.TextReader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 82; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.Length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public Lexer(LexerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 82; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.Length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(LexerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 82; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.Length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind){
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.Length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  class LookaheadSuccess : System.Exception{ }
  private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private bool jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private long jj_init_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private System.Collections.Generic.List<long[]> jj_expentries = new System.Collections.Generic.List<long[]>();
  private long[] jj_expentry;
  private long jj_kind = -1;
  private long[] jj_lasttokens = new long[100];
  private long jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new long[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      bool exists = false;
      foreach(long[] oldentry in jj_expentries) {
        if (oldentry.Length == jj_expentry.Length) {
          exists = true;
          for (int i = 0; i < jj_expentry.Length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.Add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.Clear();
    bool[] la1tokens = new bool[144];
    for (int i = 0; i < 144; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 82; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 144; i++) {
      if (la1tokens[i]) {
        jj_expentry = new long[1];
        jj_expentry[0] = i;
        jj_expentries.Add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    long[][] exptokseq = new long[jj_expentries.Count][];
    for (int i = 0; i < jj_expentries.Count; i++) {
      exptokseq[i] = (long[])jj_expentries[i];
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  public void enable_tracing() {
  }

  public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 187; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
            case 62: jj_3_63(); break;
            case 63: jj_3_64(); break;
            case 64: jj_3_65(); break;
            case 65: jj_3_66(); break;
            case 66: jj_3_67(); break;
            case 67: jj_3_68(); break;
            case 68: jj_3_69(); break;
            case 69: jj_3_70(); break;
            case 70: jj_3_71(); break;
            case 71: jj_3_72(); break;
            case 72: jj_3_73(); break;
            case 73: jj_3_74(); break;
            case 74: jj_3_75(); break;
            case 75: jj_3_76(); break;
            case 76: jj_3_77(); break;
            case 77: jj_3_78(); break;
            case 78: jj_3_79(); break;
            case 79: jj_3_80(); break;
            case 80: jj_3_81(); break;
            case 81: jj_3_82(); break;
            case 82: jj_3_83(); break;
            case 83: jj_3_84(); break;
            case 84: jj_3_85(); break;
            case 85: jj_3_86(); break;
            case 86: jj_3_87(); break;
            case 87: jj_3_88(); break;
            case 88: jj_3_89(); break;
            case 89: jj_3_90(); break;
            case 90: jj_3_91(); break;
            case 91: jj_3_92(); break;
            case 92: jj_3_93(); break;
            case 93: jj_3_94(); break;
            case 94: jj_3_95(); break;
            case 95: jj_3_96(); break;
            case 96: jj_3_97(); break;
            case 97: jj_3_98(); break;
            case 98: jj_3_99(); break;
            case 99: jj_3_100(); break;
            case 100: jj_3_101(); break;
            case 101: jj_3_102(); break;
            case 102: jj_3_103(); break;
            case 103: jj_3_104(); break;
            case 104: jj_3_105(); break;
            case 105: jj_3_106(); break;
            case 106: jj_3_107(); break;
            case 107: jj_3_108(); break;
            case 108: jj_3_109(); break;
            case 109: jj_3_110(); break;
            case 110: jj_3_111(); break;
            case 111: jj_3_112(); break;
            case 112: jj_3_113(); break;
            case 113: jj_3_114(); break;
            case 114: jj_3_115(); break;
            case 115: jj_3_116(); break;
            case 116: jj_3_117(); break;
            case 117: jj_3_118(); break;
            case 118: jj_3_119(); break;
            case 119: jj_3_120(); break;
            case 120: jj_3_121(); break;
            case 121: jj_3_122(); break;
            case 122: jj_3_123(); break;
            case 123: jj_3_124(); break;
            case 124: jj_3_125(); break;
            case 125: jj_3_126(); break;
            case 126: jj_3_127(); break;
            case 127: jj_3_128(); break;
            case 128: jj_3_129(); break;
            case 129: jj_3_130(); break;
            case 130: jj_3_131(); break;
            case 131: jj_3_132(); break;
            case 132: jj_3_133(); break;
            case 133: jj_3_134(); break;
            case 134: jj_3_135(); break;
            case 135: jj_3_136(); break;
            case 136: jj_3_137(); break;
            case 137: jj_3_138(); break;
            case 138: jj_3_139(); break;
            case 139: jj_3_140(); break;
            case 140: jj_3_141(); break;
            case 141: jj_3_142(); break;
            case 142: jj_3_143(); break;
            case 143: jj_3_144(); break;
            case 144: jj_3_145(); break;
            case 145: jj_3_146(); break;
            case 146: jj_3_147(); break;
            case 147: jj_3_148(); break;
            case 148: jj_3_149(); break;
            case 149: jj_3_150(); break;
            case 150: jj_3_151(); break;
            case 151: jj_3_152(); break;
            case 152: jj_3_153(); break;
            case 153: jj_3_154(); break;
            case 154: jj_3_155(); break;
            case 155: jj_3_156(); break;
            case 156: jj_3_157(); break;
            case 157: jj_3_158(); break;
            case 158: jj_3_159(); break;
            case 159: jj_3_160(); break;
            case 160: jj_3_161(); break;
            case 161: jj_3_162(); break;
            case 162: jj_3_163(); break;
            case 163: jj_3_164(); break;
            case 164: jj_3_165(); break;
            case 165: jj_3_166(); break;
            case 166: jj_3_167(); break;
            case 167: jj_3_168(); break;
            case 168: jj_3_169(); break;
            case 169: jj_3_170(); break;
            case 170: jj_3_171(); break;
            case 171: jj_3_172(); break;
            case 172: jj_3_173(); break;
            case 173: jj_3_174(); break;
            case 174: jj_3_175(); break;
            case 175: jj_3_176(); break;
            case 176: jj_3_177(); break;
            case 177: jj_3_178(); break;
            case 178: jj_3_179(); break;
            case 179: jj_3_180(); break;
            case 180: jj_3_181(); break;
            case 181: jj_3_182(); break;
            case 182: jj_3_183(); break;
            case 183: jj_3_184(); break;
            case 184: jj_3_185(); break;
            case 185: jj_3_186(); break;
            case 186: jj_3_187(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  class JJCalls {
    public long gen;
    public Token first;
    public int arg;
    public JJCalls next;
  }

}
}

